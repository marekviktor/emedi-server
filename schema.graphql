"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Admin`."""
  admins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminFilter
  ): AdminsConnection

  """
  Reads and enables pagination through a set of `AdminMedicamentDescription`.
  """
  adminMedicamentDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminMedicamentDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminMedicamentDescriptionFilter
  ): AdminMedicamentDescriptionsConnection

  """Reads and enables pagination through a set of `Ambulance`."""
  ambulances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ambulance`."""
    orderBy: [AmbulancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmbulanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmbulanceFilter
  ): AmbulancesConnection

  """Reads and enables pagination through a set of `BloodCount`."""
  bloodCounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCount`."""
    orderBy: [BloodCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountFilter
  ): BloodCountsConnection

  """Reads and enables pagination through a set of `BloodCountUser`."""
  bloodCountUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserFilter
  ): BloodCountUsersConnection

  """Reads and enables pagination through a set of `BloodCountUserValue`."""
  bloodCountUserValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserValueFilter
  ): BloodCountUserValuesConnection

  """Reads and enables pagination through a set of `BloodType`."""
  bloodTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodType`."""
    orderBy: [BloodTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodTypeFilter
  ): BloodTypesConnection

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): DiagnosesConnection

  """Reads and enables pagination through a set of `DiagnosisCategory`."""
  diagnosisCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisCategoryFilter
  ): DiagnosisCategoriesConnection

  """Reads and enables pagination through a set of `DiagnosisGroup`."""
  diagnosisGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DiagnosisGroup`."""
    orderBy: [DiagnosisGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisGroupFilter
  ): DiagnosisGroupsConnection

  """Reads and enables pagination through a set of `InsuranceCompany`."""
  insuranceCompanies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InsuranceCompany`."""
    orderBy: [InsuranceCompaniesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InsuranceCompanyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InsuranceCompanyFilter
  ): InsuranceCompaniesConnection

  """Reads and enables pagination through a set of `Medicament`."""
  medicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MedicamentFilter
  ): MedicamentsConnection

  """Reads and enables pagination through a set of `Meeting`."""
  meetings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeetingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeetingFilter
  ): MeetingsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `UserDiagnosis`."""
  userDiagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDiagnosisFilter
  ): UserDiagnosesConnection

  """Reads and enables pagination through a set of `UserMedicament`."""
  userMedicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentFilter
  ): UserMedicamentsConnection

  """Reads and enables pagination through a set of `UserMedicamentTime`."""
  userMedicamentTimes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicamentTime`."""
    orderBy: [UserMedicamentTimesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentTimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentTimeFilter
  ): UserMedicamentTimesConnection
  admin(adminId: Int!): Admin
  adminMedicamentDescription(adminMedicamentDescriptionId: Int!): AdminMedicamentDescription
  ambulance(ambulanceId: String!): Ambulance
  bloodCount(valueId: Int!): BloodCount
  bloodCountUser(bloodCountUserId: Int!): BloodCountUser
  bloodCountUserByUserIdAndBloodCountId(userId: Int!, bloodCountId: Int!): BloodCountUser
  bloodCountUserValue(bloodCountUserValueId: Int!): BloodCountUserValue
  bloodType(bloodTypeId: Int!): BloodType
  diagnosis(diagnosisId: String!): Diagnosis
  diagnosisCategory(diagnosisCategoryId: String!): DiagnosisCategory
  diagnosisGroup(diagnosisGroupId: String!): DiagnosisGroup
  insuranceCompany(insuranceCompanyId: Int!): InsuranceCompany
  medicament(medicamentId: Int!): Medicament
  meeting(meetingId: Int!): Meeting
  user(userId: Int!): User
  userMedicament(userMedicamentId: Int!): UserMedicament

  """Reads a single `Admin` using its globally unique `ID`."""
  adminByNodeId(
    """The globally unique `ID` to be used in selecting a single `Admin`."""
    nodeId: ID!
  ): Admin

  """
  Reads a single `AdminMedicamentDescription` using its globally unique `ID`.
  """
  adminMedicamentDescriptionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AdminMedicamentDescription`.
    """
    nodeId: ID!
  ): AdminMedicamentDescription

  """Reads a single `Ambulance` using its globally unique `ID`."""
  ambulanceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Ambulance`."""
    nodeId: ID!
  ): Ambulance

  """Reads a single `BloodCount` using its globally unique `ID`."""
  bloodCountByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BloodCount`.
    """
    nodeId: ID!
  ): BloodCount

  """Reads a single `BloodCountUser` using its globally unique `ID`."""
  bloodCountUserByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BloodCountUser`.
    """
    nodeId: ID!
  ): BloodCountUser

  """Reads a single `BloodCountUserValue` using its globally unique `ID`."""
  bloodCountUserValueByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BloodCountUserValue`.
    """
    nodeId: ID!
  ): BloodCountUserValue

  """Reads a single `BloodType` using its globally unique `ID`."""
  bloodTypeByNodeId(
    """The globally unique `ID` to be used in selecting a single `BloodType`."""
    nodeId: ID!
  ): BloodType

  """Reads a single `Diagnosis` using its globally unique `ID`."""
  diagnosisByNodeId(
    """The globally unique `ID` to be used in selecting a single `Diagnosis`."""
    nodeId: ID!
  ): Diagnosis

  """Reads a single `DiagnosisCategory` using its globally unique `ID`."""
  diagnosisCategoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DiagnosisCategory`.
    """
    nodeId: ID!
  ): DiagnosisCategory

  """Reads a single `DiagnosisGroup` using its globally unique `ID`."""
  diagnosisGroupByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DiagnosisGroup`.
    """
    nodeId: ID!
  ): DiagnosisGroup

  """Reads a single `InsuranceCompany` using its globally unique `ID`."""
  insuranceCompanyByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InsuranceCompany`.
    """
    nodeId: ID!
  ): InsuranceCompany

  """Reads a single `Medicament` using its globally unique `ID`."""
  medicamentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Medicament`.
    """
    nodeId: ID!
  ): Medicament

  """Reads a single `Meeting` using its globally unique `ID`."""
  meetingByNodeId(
    """The globally unique `ID` to be used in selecting a single `Meeting`."""
    nodeId: ID!
  ): Meeting

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserMedicament` using its globally unique `ID`."""
  userMedicamentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserMedicament`.
    """
    nodeId: ID!
  ): UserMedicament
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Admin` values."""
type AdminsConnection {
  """A list of `Admin` objects."""
  nodes: [Admin]!

  """
  A list of edges which contains the `Admin` and cursor to aid in pagination.
  """
  edges: [AdminsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Admin` you could get from the connection."""
  totalCount: Int!
}

type Admin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  adminId: Int!
  firstName: String!
  lastName: String!
  ambulanceId: String
  adminVerified: Boolean
  registrationDate: Date
  email: String
  phone: String
  lastLogin: Date

  """Reads a single `Ambulance` that is related to this `Admin`."""
  ambulance: Ambulance

  """Reads and enables pagination through a set of `Meeting`."""
  meetings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeetingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeetingFilter
  ): MeetingsConnection!

  """
  Reads and enables pagination through a set of `AdminMedicamentDescription`.
  """
  adminMedicamentDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminMedicamentDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminMedicamentDescriptionFilter
  ): AdminMedicamentDescriptionsConnection!

  """Reads and enables pagination through a set of `Medicament`."""
  medicamentsByAdminMedicamentDescriptionAdminIdAndMedicamentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MedicamentFilter
  ): AdminMedicamentsByAdminMedicamentDescriptionAdminIdAndMedicamentIdManyToManyConnection!
}

"""The day, does not include a time."""
scalar Date

type Ambulance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ambulanceId: String!
  name: String!
  ico: String!
  city: String!
  street: String!
  state: String!
  suite: String!

  """Reads and enables pagination through a set of `Admin`."""
  admins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminFilter
  ): AdminsConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `Admin`."""
enum AdminsOrderBy {
  NATURAL
  ADMIN_ID_ASC
  ADMIN_ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  AMBULANCE_ID_ASC
  AMBULANCE_ID_DESC
  ADMIN_VERIFIED_ASC
  ADMIN_VERIFIED_DESC
  REGISTRATION_DATE_ASC
  REGISTRATION_DATE_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Admin` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AdminCondition {
  """Checks for equality with the object’s `adminId` field."""
  adminId: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `ambulanceId` field."""
  ambulanceId: String

  """Checks for equality with the object’s `adminVerified` field."""
  adminVerified: Boolean

  """Checks for equality with the object’s `registrationDate` field."""
  registrationDate: Date

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `lastLogin` field."""
  lastLogin: Date
}

"""
A filter to be used against `Admin` object types. All fields are combined with a logical ‘and.’
"""
input AdminFilter {
  """Filter by the object’s `adminId` field."""
  adminId: IntFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `ambulanceId` field."""
  ambulanceId: StringFilter

  """Filter by the object’s `adminVerified` field."""
  adminVerified: BooleanFilter

  """Filter by the object’s `registrationDate` field."""
  registrationDate: DateFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `phone` field."""
  phone: StringFilter

  """Filter by the object’s `lastLogin` field."""
  lastLogin: DateFilter

  """Checks for all expressions in this list."""
  and: [AdminFilter!]

  """Checks for any expressions in this list."""
  or: [AdminFilter!]

  """Negates the expression."""
  not: AdminFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""A connection to a list of `Meeting` values."""
type MeetingsConnection {
  """A list of `Meeting` objects."""
  nodes: [Meeting]!

  """
  A list of edges which contains the `Meeting` and cursor to aid in pagination.
  """
  edges: [MeetingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Meeting` you could get from the connection."""
  totalCount: Int!
}

type Meeting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  meetingId: Int!
  meetingDate: Date!
  note: String
  userId: String!
  adminId: Int!

  """Reads a single `Admin` that is related to this `Meeting`."""
  admin: Admin

  """Reads and enables pagination through a set of `BloodCountUserValue`."""
  bloodCountUserValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserValueFilter
  ): BloodCountUserValuesConnection!

  """Reads and enables pagination through a set of `BloodCountUser`."""
  bloodCountUsersByBloodCountUserValueMeetingIdAndBloodCountUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserFilter
  ): MeetingBloodCountUsersByBloodCountUserValueMeetingIdAndBloodCountUserIdManyToManyConnection!
}

"""A connection to a list of `BloodCountUserValue` values."""
type BloodCountUserValuesConnection {
  """A list of `BloodCountUserValue` objects."""
  nodes: [BloodCountUserValue]!

  """
  A list of edges which contains the `BloodCountUserValue` and cursor to aid in pagination.
  """
  edges: [BloodCountUserValuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BloodCountUserValue` you could get from the connection.
  """
  totalCount: Int!
}

type BloodCountUserValue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  bloodCountUserValueId: Int!
  bloodCountUserId: Int!
  meetingId: Int
  bloodCountValue: Float!
  description: String
  createdAt: Date!

  """
  Reads a single `BloodCountUser` that is related to this `BloodCountUserValue`.
  """
  bloodCountUser: BloodCountUser

  """
  Reads a single `Meeting` that is related to this `BloodCountUserValue`.
  """
  meeting: Meeting
}

type BloodCountUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  bloodCountUserId: Int!
  userId: Int!
  bloodCountId: Int!

  """Reads a single `User` that is related to this `BloodCountUser`."""
  user: User

  """Reads a single `BloodCount` that is related to this `BloodCountUser`."""
  bloodCount: BloodCount

  """Reads and enables pagination through a set of `BloodCountUserValue`."""
  bloodCountUserValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserValueFilter
  ): BloodCountUserValuesConnection!

  """Reads and enables pagination through a set of `Meeting`."""
  meetingsByBloodCountUserValueBloodCountUserIdAndMeetingId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeetingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeetingFilter
  ): BloodCountUserMeetingsByBloodCountUserValueBloodCountUserIdAndMeetingIdManyToManyConnection!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userId: Int!
  foreName: String!
  surName: String!
  identNumber: String
  insuranceNumber: String
  email: String
  phone: String
  birthdate: Date
  verified: Boolean
  insuranceCompanyId: Int
  lastLogin: Date
  bloodTypeId: Int
  rhD: Boolean
  registeredAt: Date!

  """Reads a single `InsuranceCompany` that is related to this `User`."""
  insuranceCompany: InsuranceCompany

  """Reads a single `BloodType` that is related to this `User`."""
  bloodType: BloodType

  """Reads and enables pagination through a set of `UserDiagnosis`."""
  userDiagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDiagnosisFilter
  ): UserDiagnosesConnection!

  """Reads and enables pagination through a set of `UserMedicament`."""
  userMedicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentFilter
  ): UserMedicamentsConnection!

  """Reads and enables pagination through a set of `BloodCountUser`."""
  bloodCountUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserFilter
  ): BloodCountUsersConnection!

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnosesByUserDiagnosisUserIdAndDiagnosisId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): UserDiagnosesByUserDiagnosisUserIdAndDiagnosisIdManyToManyConnection!

  """Reads and enables pagination through a set of `Medicament`."""
  medicamentsByUserMedicamentUserIdAndMedicamentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MedicamentFilter
  ): UserMedicamentsByUserMedicamentUserIdAndMedicamentIdManyToManyConnection!

  """Reads and enables pagination through a set of `BloodCount`."""
  bloodCountsByBloodCountUserUserIdAndBloodCountId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCount`."""
    orderBy: [BloodCountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountFilter
  ): UserBloodCountsByBloodCountUserUserIdAndBloodCountIdManyToManyConnection!
}

type InsuranceCompany implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  insuranceCompanyId: Int!
  name: String!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `BloodType`."""
  bloodTypesByUserInsuranceCompanyIdAndBloodTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodType`."""
    orderBy: [BloodTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodTypeFilter
  ): InsuranceCompanyBloodTypesByUserInsuranceCompanyIdAndBloodTypeIdManyToManyConnection!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  FORE_NAME_ASC
  FORE_NAME_DESC
  SUR_NAME_ASC
  SUR_NAME_DESC
  IDENT_NUMBER_ASC
  IDENT_NUMBER_DESC
  INSURANCE_NUMBER_ASC
  INSURANCE_NUMBER_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  BIRTHDATE_ASC
  BIRTHDATE_DESC
  VERIFIED_ASC
  VERIFIED_DESC
  INSURANCE_COMPANY_ID_ASC
  INSURANCE_COMPANY_ID_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
  BLOOD_TYPE_ID_ASC
  BLOOD_TYPE_ID_DESC
  RH_D_ASC
  RH_D_DESC
  REGISTERED_AT_ASC
  REGISTERED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `foreName` field."""
  foreName: String

  """Checks for equality with the object’s `surName` field."""
  surName: String

  """Checks for equality with the object’s `identNumber` field."""
  identNumber: String

  """Checks for equality with the object’s `insuranceNumber` field."""
  insuranceNumber: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `birthdate` field."""
  birthdate: Date

  """Checks for equality with the object’s `verified` field."""
  verified: Boolean

  """Checks for equality with the object’s `insuranceCompanyId` field."""
  insuranceCompanyId: Int

  """Checks for equality with the object’s `lastLogin` field."""
  lastLogin: Date

  """Checks for equality with the object’s `bloodTypeId` field."""
  bloodTypeId: Int

  """Checks for equality with the object’s `rhD` field."""
  rhD: Boolean

  """Checks for equality with the object’s `registeredAt` field."""
  registeredAt: Date
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `foreName` field."""
  foreName: StringFilter

  """Filter by the object’s `surName` field."""
  surName: StringFilter

  """Filter by the object’s `identNumber` field."""
  identNumber: StringFilter

  """Filter by the object’s `insuranceNumber` field."""
  insuranceNumber: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `phone` field."""
  phone: StringFilter

  """Filter by the object’s `birthdate` field."""
  birthdate: DateFilter

  """Filter by the object’s `verified` field."""
  verified: BooleanFilter

  """Filter by the object’s `insuranceCompanyId` field."""
  insuranceCompanyId: IntFilter

  """Filter by the object’s `lastLogin` field."""
  lastLogin: DateFilter

  """Filter by the object’s `bloodTypeId` field."""
  bloodTypeId: IntFilter

  """Filter by the object’s `rhD` field."""
  rhD: BooleanFilter

  """Filter by the object’s `registeredAt` field."""
  registeredAt: DateFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""A connection to a list of `BloodType` values, with data from `User`."""
type InsuranceCompanyBloodTypesByUserInsuranceCompanyIdAndBloodTypeIdManyToManyConnection {
  """A list of `BloodType` objects."""
  nodes: [BloodType]!

  """
  A list of edges which contains the `BloodType`, info from the `User`, and the cursor to aid in pagination.
  """
  edges: [InsuranceCompanyBloodTypesByUserInsuranceCompanyIdAndBloodTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodType` you could get from the connection."""
  totalCount: Int!
}

type BloodType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  bloodTypeId: Int!
  name: String!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `InsuranceCompany`."""
  insuranceCompaniesByUserBloodTypeIdAndInsuranceCompanyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InsuranceCompany`."""
    orderBy: [InsuranceCompaniesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InsuranceCompanyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InsuranceCompanyFilter
  ): BloodTypeInsuranceCompaniesByUserBloodTypeIdAndInsuranceCompanyIdManyToManyConnection!
}

"""
A connection to a list of `InsuranceCompany` values, with data from `User`.
"""
type BloodTypeInsuranceCompaniesByUserBloodTypeIdAndInsuranceCompanyIdManyToManyConnection {
  """A list of `InsuranceCompany` objects."""
  nodes: [InsuranceCompany]!

  """
  A list of edges which contains the `InsuranceCompany`, info from the `User`, and the cursor to aid in pagination.
  """
  edges: [BloodTypeInsuranceCompaniesByUserBloodTypeIdAndInsuranceCompanyIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InsuranceCompany` you could get from the connection.
  """
  totalCount: Int!
}

"""A `InsuranceCompany` edge in the connection, with data from `User`."""
type BloodTypeInsuranceCompaniesByUserBloodTypeIdAndInsuranceCompanyIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InsuranceCompany` at the end of the edge."""
  node: InsuranceCompany

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!
}

"""Methods to use when ordering `InsuranceCompany`."""
enum InsuranceCompaniesOrderBy {
  NATURAL
  INSURANCE_COMPANY_ID_ASC
  INSURANCE_COMPANY_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `InsuranceCompany` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InsuranceCompanyCondition {
  """Checks for equality with the object’s `insuranceCompanyId` field."""
  insuranceCompanyId: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `InsuranceCompany` object types. All fields are combined with a logical ‘and.’
"""
input InsuranceCompanyFilter {
  """Filter by the object’s `insuranceCompanyId` field."""
  insuranceCompanyId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [InsuranceCompanyFilter!]

  """Checks for any expressions in this list."""
  or: [InsuranceCompanyFilter!]

  """Negates the expression."""
  not: InsuranceCompanyFilter
}

"""A `BloodType` edge in the connection, with data from `User`."""
type InsuranceCompanyBloodTypesByUserInsuranceCompanyIdAndBloodTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodType` at the end of the edge."""
  node: BloodType

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!
}

"""Methods to use when ordering `BloodType`."""
enum BloodTypesOrderBy {
  NATURAL
  BLOOD_TYPE_ID_ASC
  BLOOD_TYPE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BloodType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BloodTypeCondition {
  """Checks for equality with the object’s `bloodTypeId` field."""
  bloodTypeId: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `BloodType` object types. All fields are combined with a logical ‘and.’
"""
input BloodTypeFilter {
  """Filter by the object’s `bloodTypeId` field."""
  bloodTypeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [BloodTypeFilter!]

  """Checks for any expressions in this list."""
  or: [BloodTypeFilter!]

  """Negates the expression."""
  not: BloodTypeFilter
}

"""A connection to a list of `UserDiagnosis` values."""
type UserDiagnosesConnection {
  """A list of `UserDiagnosis` objects."""
  nodes: [UserDiagnosis]!

  """
  A list of edges which contains the `UserDiagnosis` and cursor to aid in pagination.
  """
  edges: [UserDiagnosesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserDiagnosis` you could get from the connection."""
  totalCount: Int!
}

type UserDiagnosis {
  userId: Int!
  diagnosisId: String!

  """Reads a single `User` that is related to this `UserDiagnosis`."""
  user: User

  """Reads a single `Diagnosis` that is related to this `UserDiagnosis`."""
  diagnosis: Diagnosis
}

type Diagnosis implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  diagnosisId: String!
  name: String!
  diagnosisCategoryId: String!
  diagnosisGroupId: String!
  description: String

  """
  Reads a single `DiagnosisCategory` that is related to this `Diagnosis`.
  """
  diagnosisCategory: DiagnosisCategory

  """Reads a single `DiagnosisGroup` that is related to this `Diagnosis`."""
  diagnosisGroup: DiagnosisGroup

  """Reads and enables pagination through a set of `UserDiagnosis`."""
  userDiagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDiagnosisFilter
  ): UserDiagnosesConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUserDiagnosisDiagnosisIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): DiagnosisUsersByUserDiagnosisDiagnosisIdAndUserIdManyToManyConnection!
}

type DiagnosisCategory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  diagnosisCategoryId: String!
  name: String!
  diagnosisGroupId: String!
  description: String

  """
  Reads a single `DiagnosisGroup` that is related to this `DiagnosisCategory`.
  """
  diagnosisGroup: DiagnosisGroup

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): DiagnosesConnection!

  """Reads and enables pagination through a set of `DiagnosisGroup`."""
  diagnosisGroupsByDiagnosisDiagnosisCategoryIdAndDiagnosisGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DiagnosisGroup`."""
    orderBy: [DiagnosisGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisGroupFilter
  ): DiagnosisCategoryDiagnosisGroupsByDiagnosisDiagnosisCategoryIdAndDiagnosisGroupIdManyToManyConnection!
}

type DiagnosisGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  diagnosisGroupId: String!
  name: String!
  description: String

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): DiagnosesConnection!

  """Reads and enables pagination through a set of `DiagnosisCategory`."""
  diagnosisCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisCategoryFilter
  ): DiagnosisCategoriesConnection!

  """Reads and enables pagination through a set of `DiagnosisCategory`."""
  diagnosisCategoriesByDiagnosisDiagnosisGroupIdAndDiagnosisCategoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCategoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisCategoryFilter
  ): DiagnosisGroupDiagnosisCategoriesByDiagnosisDiagnosisGroupIdAndDiagnosisCategoryIdManyToManyConnection!
}

"""A connection to a list of `Diagnosis` values."""
type DiagnosesConnection {
  """A list of `Diagnosis` objects."""
  nodes: [Diagnosis]!

  """
  A list of edges which contains the `Diagnosis` and cursor to aid in pagination.
  """
  edges: [DiagnosesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Diagnosis` you could get from the connection."""
  totalCount: Int!
}

"""A `Diagnosis` edge in the connection."""
type DiagnosesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Diagnosis` at the end of the edge."""
  node: Diagnosis
}

"""Methods to use when ordering `Diagnosis`."""
enum DiagnosesOrderBy {
  NATURAL
  DIAGNOSIS_ID_ASC
  DIAGNOSIS_ID_DESC
  NAME_ASC
  NAME_DESC
  DIAGNOSIS_CATEGORY_ID_ASC
  DIAGNOSIS_CATEGORY_ID_DESC
  DIAGNOSIS_GROUP_ID_ASC
  DIAGNOSIS_GROUP_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Diagnosis` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DiagnosisCondition {
  """Checks for equality with the object’s `diagnosisId` field."""
  diagnosisId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `diagnosisCategoryId` field."""
  diagnosisCategoryId: String

  """Checks for equality with the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `Diagnosis` object types. All fields are combined with a logical ‘and.’
"""
input DiagnosisFilter {
  """Filter by the object’s `diagnosisId` field."""
  diagnosisId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `diagnosisCategoryId` field."""
  diagnosisCategoryId: StringFilter

  """Filter by the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [DiagnosisFilter!]

  """Checks for any expressions in this list."""
  or: [DiagnosisFilter!]

  """Negates the expression."""
  not: DiagnosisFilter
}

"""A connection to a list of `DiagnosisCategory` values."""
type DiagnosisCategoriesConnection {
  """A list of `DiagnosisCategory` objects."""
  nodes: [DiagnosisCategory]!

  """
  A list of edges which contains the `DiagnosisCategory` and cursor to aid in pagination.
  """
  edges: [DiagnosisCategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DiagnosisCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DiagnosisCategory` edge in the connection."""
type DiagnosisCategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DiagnosisCategory` at the end of the edge."""
  node: DiagnosisCategory
}

"""Methods to use when ordering `DiagnosisCategory`."""
enum DiagnosisCategoriesOrderBy {
  NATURAL
  DIAGNOSIS_CATEGORY_ID_ASC
  DIAGNOSIS_CATEGORY_ID_DESC
  NAME_ASC
  NAME_DESC
  DIAGNOSIS_GROUP_ID_ASC
  DIAGNOSIS_GROUP_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DiagnosisCategory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DiagnosisCategoryCondition {
  """Checks for equality with the object’s `diagnosisCategoryId` field."""
  diagnosisCategoryId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `DiagnosisCategory` object types. All fields are combined with a logical ‘and.’
"""
input DiagnosisCategoryFilter {
  """Filter by the object’s `diagnosisCategoryId` field."""
  diagnosisCategoryId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [DiagnosisCategoryFilter!]

  """Checks for any expressions in this list."""
  or: [DiagnosisCategoryFilter!]

  """Negates the expression."""
  not: DiagnosisCategoryFilter
}

"""
A connection to a list of `DiagnosisCategory` values, with data from `Diagnosis`.
"""
type DiagnosisGroupDiagnosisCategoriesByDiagnosisDiagnosisGroupIdAndDiagnosisCategoryIdManyToManyConnection {
  """A list of `DiagnosisCategory` objects."""
  nodes: [DiagnosisCategory]!

  """
  A list of edges which contains the `DiagnosisCategory`, info from the `Diagnosis`, and the cursor to aid in pagination.
  """
  edges: [DiagnosisGroupDiagnosisCategoriesByDiagnosisDiagnosisGroupIdAndDiagnosisCategoryIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DiagnosisCategory` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `DiagnosisCategory` edge in the connection, with data from `Diagnosis`.
"""
type DiagnosisGroupDiagnosisCategoriesByDiagnosisDiagnosisGroupIdAndDiagnosisCategoryIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DiagnosisCategory` at the end of the edge."""
  node: DiagnosisCategory

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): DiagnosesConnection!
}

"""
A connection to a list of `DiagnosisGroup` values, with data from `Diagnosis`.
"""
type DiagnosisCategoryDiagnosisGroupsByDiagnosisDiagnosisCategoryIdAndDiagnosisGroupIdManyToManyConnection {
  """A list of `DiagnosisGroup` objects."""
  nodes: [DiagnosisGroup]!

  """
  A list of edges which contains the `DiagnosisGroup`, info from the `Diagnosis`, and the cursor to aid in pagination.
  """
  edges: [DiagnosisCategoryDiagnosisGroupsByDiagnosisDiagnosisCategoryIdAndDiagnosisGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DiagnosisGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `DiagnosisGroup` edge in the connection, with data from `Diagnosis`."""
type DiagnosisCategoryDiagnosisGroupsByDiagnosisDiagnosisCategoryIdAndDiagnosisGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DiagnosisGroup` at the end of the edge."""
  node: DiagnosisGroup

  """Reads and enables pagination through a set of `Diagnosis`."""
  diagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiagnosisFilter
  ): DiagnosesConnection!
}

"""Methods to use when ordering `DiagnosisGroup`."""
enum DiagnosisGroupsOrderBy {
  NATURAL
  DIAGNOSIS_GROUP_ID_ASC
  DIAGNOSIS_GROUP_ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DiagnosisGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DiagnosisGroupCondition {
  """Checks for equality with the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `DiagnosisGroup` object types. All fields are combined with a logical ‘and.’
"""
input DiagnosisGroupFilter {
  """Filter by the object’s `diagnosisGroupId` field."""
  diagnosisGroupId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [DiagnosisGroupFilter!]

  """Checks for any expressions in this list."""
  or: [DiagnosisGroupFilter!]

  """Negates the expression."""
  not: DiagnosisGroupFilter
}

"""Methods to use when ordering `UserDiagnosis`."""
enum UserDiagnosesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  DIAGNOSIS_ID_ASC
  DIAGNOSIS_ID_DESC
}

"""
A condition to be used against `UserDiagnosis` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserDiagnosisCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `diagnosisId` field."""
  diagnosisId: String
}

"""
A filter to be used against `UserDiagnosis` object types. All fields are combined with a logical ‘and.’
"""
input UserDiagnosisFilter {
  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `diagnosisId` field."""
  diagnosisId: StringFilter

  """Checks for all expressions in this list."""
  and: [UserDiagnosisFilter!]

  """Checks for any expressions in this list."""
  or: [UserDiagnosisFilter!]

  """Negates the expression."""
  not: UserDiagnosisFilter
}

"""
A connection to a list of `User` values, with data from `UserDiagnosis`.
"""
type DiagnosisUsersByUserDiagnosisDiagnosisIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `UserDiagnosis`, and the cursor to aid in pagination.
  """
  edges: [DiagnosisUsersByUserDiagnosisDiagnosisIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `UserDiagnosis`."""
type DiagnosisUsersByUserDiagnosisDiagnosisIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `UserDiagnosis`."""
  userDiagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDiagnosisFilter
  ): UserDiagnosesConnection!
}

"""A `UserDiagnosis` edge in the connection."""
type UserDiagnosesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserDiagnosis` at the end of the edge."""
  node: UserDiagnosis
}

"""A connection to a list of `UserMedicament` values."""
type UserMedicamentsConnection {
  """A list of `UserMedicament` objects."""
  nodes: [UserMedicament]!

  """
  A list of edges which contains the `UserMedicament` and cursor to aid in pagination.
  """
  edges: [UserMedicamentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserMedicament` you could get from the connection."""
  totalCount: Int!
}

type UserMedicament implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userMedicamentId: Int!
  userId: Int!
  medicamentId: Int!

  """Reads a single `User` that is related to this `UserMedicament`."""
  user: User

  """Reads a single `Medicament` that is related to this `UserMedicament`."""
  medicament: Medicament

  """Reads and enables pagination through a set of `UserMedicamentTime`."""
  userMedicamentTimes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicamentTime`."""
    orderBy: [UserMedicamentTimesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentTimeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentTimeFilter
  ): UserMedicamentTimesConnection!
}

type Medicament implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  medicamentId: Int!
  code: String!
  title: String!
  supplement: String
  strength: String
  packaging: Int
  holderCode: String
  stateCode: String
  atcCode: String
  atcTitleSk: String
  indicationGroup: String
  regNumber: String
  expiration: String
  dispensing: String
  registrationType: String
  regDate: String
  validity: String
  securityFeature: String

  """Reads and enables pagination through a set of `UserMedicament`."""
  userMedicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentFilter
  ): UserMedicamentsConnection!

  """
  Reads and enables pagination through a set of `AdminMedicamentDescription`.
  """
  adminMedicamentDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminMedicamentDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminMedicamentDescriptionFilter
  ): AdminMedicamentDescriptionsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUserMedicamentMedicamentIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): MedicamentUsersByUserMedicamentMedicamentIdAndUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `Admin`."""
  adminsByAdminMedicamentDescriptionMedicamentIdAndAdminId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminFilter
  ): MedicamentAdminsByAdminMedicamentDescriptionMedicamentIdAndAdminIdManyToManyConnection!
}

"""Methods to use when ordering `UserMedicament`."""
enum UserMedicamentsOrderBy {
  NATURAL
  USER_MEDICAMENT_ID_ASC
  USER_MEDICAMENT_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  MEDICAMENT_ID_ASC
  MEDICAMENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserMedicament` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserMedicamentCondition {
  """Checks for equality with the object’s `userMedicamentId` field."""
  userMedicamentId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `medicamentId` field."""
  medicamentId: Int
}

"""
A filter to be used against `UserMedicament` object types. All fields are combined with a logical ‘and.’
"""
input UserMedicamentFilter {
  """Filter by the object’s `userMedicamentId` field."""
  userMedicamentId: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `medicamentId` field."""
  medicamentId: IntFilter

  """Checks for all expressions in this list."""
  and: [UserMedicamentFilter!]

  """Checks for any expressions in this list."""
  or: [UserMedicamentFilter!]

  """Negates the expression."""
  not: UserMedicamentFilter
}

"""A connection to a list of `AdminMedicamentDescription` values."""
type AdminMedicamentDescriptionsConnection {
  """A list of `AdminMedicamentDescription` objects."""
  nodes: [AdminMedicamentDescription]!

  """
  A list of edges which contains the `AdminMedicamentDescription` and cursor to aid in pagination.
  """
  edges: [AdminMedicamentDescriptionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdminMedicamentDescription` you could get from the connection.
  """
  totalCount: Int!
}

type AdminMedicamentDescription implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  adminMedicamentDescriptionId: Int!
  adminId: Int
  medicamentId: Int
  description: String!

  """
  Reads a single `Admin` that is related to this `AdminMedicamentDescription`.
  """
  admin: Admin

  """
  Reads a single `Medicament` that is related to this `AdminMedicamentDescription`.
  """
  medicament: Medicament
}

"""A `AdminMedicamentDescription` edge in the connection."""
type AdminMedicamentDescriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdminMedicamentDescription` at the end of the edge."""
  node: AdminMedicamentDescription
}

"""Methods to use when ordering `AdminMedicamentDescription`."""
enum AdminMedicamentDescriptionsOrderBy {
  NATURAL
  ADMIN_MEDICAMENT_DESCRIPTION_ID_ASC
  ADMIN_MEDICAMENT_DESCRIPTION_ID_DESC
  ADMIN_ID_ASC
  ADMIN_ID_DESC
  MEDICAMENT_ID_ASC
  MEDICAMENT_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AdminMedicamentDescription` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AdminMedicamentDescriptionCondition {
  """
  Checks for equality with the object’s `adminMedicamentDescriptionId` field.
  """
  adminMedicamentDescriptionId: Int

  """Checks for equality with the object’s `adminId` field."""
  adminId: Int

  """Checks for equality with the object’s `medicamentId` field."""
  medicamentId: Int

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `AdminMedicamentDescription` object types. All fields are combined with a logical ‘and.’
"""
input AdminMedicamentDescriptionFilter {
  """Filter by the object’s `adminMedicamentDescriptionId` field."""
  adminMedicamentDescriptionId: IntFilter

  """Filter by the object’s `adminId` field."""
  adminId: IntFilter

  """Filter by the object’s `medicamentId` field."""
  medicamentId: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [AdminMedicamentDescriptionFilter!]

  """Checks for any expressions in this list."""
  or: [AdminMedicamentDescriptionFilter!]

  """Negates the expression."""
  not: AdminMedicamentDescriptionFilter
}

"""
A connection to a list of `User` values, with data from `UserMedicament`.
"""
type MedicamentUsersByUserMedicamentMedicamentIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `UserMedicament`, and the cursor to aid in pagination.
  """
  edges: [MedicamentUsersByUserMedicamentMedicamentIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `UserMedicament`."""
type MedicamentUsersByUserMedicamentMedicamentIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `UserMedicament`."""
  userMedicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentFilter
  ): UserMedicamentsConnection!
}

"""
A connection to a list of `Admin` values, with data from `AdminMedicamentDescription`.
"""
type MedicamentAdminsByAdminMedicamentDescriptionMedicamentIdAndAdminIdManyToManyConnection {
  """A list of `Admin` objects."""
  nodes: [Admin]!

  """
  A list of edges which contains the `Admin`, info from the `AdminMedicamentDescription`, and the cursor to aid in pagination.
  """
  edges: [MedicamentAdminsByAdminMedicamentDescriptionMedicamentIdAndAdminIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Admin` you could get from the connection."""
  totalCount: Int!
}

"""
A `Admin` edge in the connection, with data from `AdminMedicamentDescription`.
"""
type MedicamentAdminsByAdminMedicamentDescriptionMedicamentIdAndAdminIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Admin` at the end of the edge."""
  node: Admin

  """
  Reads and enables pagination through a set of `AdminMedicamentDescription`.
  """
  adminMedicamentDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminMedicamentDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminMedicamentDescriptionFilter
  ): AdminMedicamentDescriptionsConnection!
}

"""A connection to a list of `UserMedicamentTime` values."""
type UserMedicamentTimesConnection {
  """A list of `UserMedicamentTime` objects."""
  nodes: [UserMedicamentTime]!

  """
  A list of edges which contains the `UserMedicamentTime` and cursor to aid in pagination.
  """
  edges: [UserMedicamentTimesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserMedicamentTime` you could get from the connection.
  """
  totalCount: Int!
}

type UserMedicamentTime {
  time: String
  dosing: Int
  userMedicamentId: Int!
  monday: Boolean!
  tuesday: Boolean!
  wednesday: Boolean!
  thursday: Boolean!
  friday: Boolean!
  saturday: Boolean!
  sunday: Boolean!

  """
  Reads a single `UserMedicament` that is related to this `UserMedicamentTime`.
  """
  userMedicament: UserMedicament
}

"""A `UserMedicamentTime` edge in the connection."""
type UserMedicamentTimesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserMedicamentTime` at the end of the edge."""
  node: UserMedicamentTime
}

"""Methods to use when ordering `UserMedicamentTime`."""
enum UserMedicamentTimesOrderBy {
  NATURAL
  TIME_ASC
  TIME_DESC
  DOSING_ASC
  DOSING_DESC
  USER_MEDICAMENT_ID_ASC
  USER_MEDICAMENT_ID_DESC
  MONDAY_ASC
  MONDAY_DESC
  TUESDAY_ASC
  TUESDAY_DESC
  WEDNESDAY_ASC
  WEDNESDAY_DESC
  THURSDAY_ASC
  THURSDAY_DESC
  FRIDAY_ASC
  FRIDAY_DESC
  SATURDAY_ASC
  SATURDAY_DESC
  SUNDAY_ASC
  SUNDAY_DESC
}

"""
A condition to be used against `UserMedicamentTime` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserMedicamentTimeCondition {
  """Checks for equality with the object’s `time` field."""
  time: String

  """Checks for equality with the object’s `dosing` field."""
  dosing: Int

  """Checks for equality with the object’s `userMedicamentId` field."""
  userMedicamentId: Int

  """Checks for equality with the object’s `monday` field."""
  monday: Boolean

  """Checks for equality with the object’s `tuesday` field."""
  tuesday: Boolean

  """Checks for equality with the object’s `wednesday` field."""
  wednesday: Boolean

  """Checks for equality with the object’s `thursday` field."""
  thursday: Boolean

  """Checks for equality with the object’s `friday` field."""
  friday: Boolean

  """Checks for equality with the object’s `saturday` field."""
  saturday: Boolean

  """Checks for equality with the object’s `sunday` field."""
  sunday: Boolean
}

"""
A filter to be used against `UserMedicamentTime` object types. All fields are combined with a logical ‘and.’
"""
input UserMedicamentTimeFilter {
  """Filter by the object’s `time` field."""
  time: StringFilter

  """Filter by the object’s `dosing` field."""
  dosing: IntFilter

  """Filter by the object’s `userMedicamentId` field."""
  userMedicamentId: IntFilter

  """Filter by the object’s `monday` field."""
  monday: BooleanFilter

  """Filter by the object’s `tuesday` field."""
  tuesday: BooleanFilter

  """Filter by the object’s `wednesday` field."""
  wednesday: BooleanFilter

  """Filter by the object’s `thursday` field."""
  thursday: BooleanFilter

  """Filter by the object’s `friday` field."""
  friday: BooleanFilter

  """Filter by the object’s `saturday` field."""
  saturday: BooleanFilter

  """Filter by the object’s `sunday` field."""
  sunday: BooleanFilter

  """Checks for all expressions in this list."""
  and: [UserMedicamentTimeFilter!]

  """Checks for any expressions in this list."""
  or: [UserMedicamentTimeFilter!]

  """Negates the expression."""
  not: UserMedicamentTimeFilter
}

"""A `UserMedicament` edge in the connection."""
type UserMedicamentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserMedicament` at the end of the edge."""
  node: UserMedicament
}

"""A connection to a list of `BloodCountUser` values."""
type BloodCountUsersConnection {
  """A list of `BloodCountUser` objects."""
  nodes: [BloodCountUser]!

  """
  A list of edges which contains the `BloodCountUser` and cursor to aid in pagination.
  """
  edges: [BloodCountUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodCountUser` you could get from the connection."""
  totalCount: Int!
}

"""A `BloodCountUser` edge in the connection."""
type BloodCountUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodCountUser` at the end of the edge."""
  node: BloodCountUser
}

"""Methods to use when ordering `BloodCountUser`."""
enum BloodCountUsersOrderBy {
  NATURAL
  BLOOD_COUNT_USER_ID_ASC
  BLOOD_COUNT_USER_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  BLOOD_COUNT_ID_ASC
  BLOOD_COUNT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BloodCountUser` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BloodCountUserCondition {
  """Checks for equality with the object’s `bloodCountUserId` field."""
  bloodCountUserId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `bloodCountId` field."""
  bloodCountId: Int
}

"""
A filter to be used against `BloodCountUser` object types. All fields are combined with a logical ‘and.’
"""
input BloodCountUserFilter {
  """Filter by the object’s `bloodCountUserId` field."""
  bloodCountUserId: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `bloodCountId` field."""
  bloodCountId: IntFilter

  """Checks for all expressions in this list."""
  and: [BloodCountUserFilter!]

  """Checks for any expressions in this list."""
  or: [BloodCountUserFilter!]

  """Negates the expression."""
  not: BloodCountUserFilter
}

"""
A connection to a list of `Diagnosis` values, with data from `UserDiagnosis`.
"""
type UserDiagnosesByUserDiagnosisUserIdAndDiagnosisIdManyToManyConnection {
  """A list of `Diagnosis` objects."""
  nodes: [Diagnosis]!

  """
  A list of edges which contains the `Diagnosis`, info from the `UserDiagnosis`, and the cursor to aid in pagination.
  """
  edges: [UserDiagnosesByUserDiagnosisUserIdAndDiagnosisIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Diagnosis` you could get from the connection."""
  totalCount: Int!
}

"""A `Diagnosis` edge in the connection, with data from `UserDiagnosis`."""
type UserDiagnosesByUserDiagnosisUserIdAndDiagnosisIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Diagnosis` at the end of the edge."""
  node: Diagnosis

  """Reads and enables pagination through a set of `UserDiagnosis`."""
  userDiagnoses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDiagnosisCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDiagnosisFilter
  ): UserDiagnosesConnection!
}

"""
A connection to a list of `Medicament` values, with data from `UserMedicament`.
"""
type UserMedicamentsByUserMedicamentUserIdAndMedicamentIdManyToManyConnection {
  """A list of `Medicament` objects."""
  nodes: [Medicament]!

  """
  A list of edges which contains the `Medicament`, info from the `UserMedicament`, and the cursor to aid in pagination.
  """
  edges: [UserMedicamentsByUserMedicamentUserIdAndMedicamentIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Medicament` you could get from the connection."""
  totalCount: Int!
}

"""
A `Medicament` edge in the connection, with data from `UserMedicament`.
"""
type UserMedicamentsByUserMedicamentUserIdAndMedicamentIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Medicament` at the end of the edge."""
  node: Medicament

  """Reads and enables pagination through a set of `UserMedicament`."""
  userMedicaments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserMedicamentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserMedicamentFilter
  ): UserMedicamentsConnection!
}

"""Methods to use when ordering `Medicament`."""
enum MedicamentsOrderBy {
  NATURAL
  MEDICAMENT_ID_ASC
  MEDICAMENT_ID_DESC
  CODE_ASC
  CODE_DESC
  TITLE_ASC
  TITLE_DESC
  SUPPLEMENT_ASC
  SUPPLEMENT_DESC
  STRENGTH_ASC
  STRENGTH_DESC
  PACKAGING_ASC
  PACKAGING_DESC
  HOLDER_CODE_ASC
  HOLDER_CODE_DESC
  STATE_CODE_ASC
  STATE_CODE_DESC
  ATC_CODE_ASC
  ATC_CODE_DESC
  ATC_TITLE_SK_ASC
  ATC_TITLE_SK_DESC
  INDICATION_GROUP_ASC
  INDICATION_GROUP_DESC
  REG_NUMBER_ASC
  REG_NUMBER_DESC
  EXPIRATION_ASC
  EXPIRATION_DESC
  DISPENSING_ASC
  DISPENSING_DESC
  REGISTRATION_TYPE_ASC
  REGISTRATION_TYPE_DESC
  REG_DATE_ASC
  REG_DATE_DESC
  VALIDITY_ASC
  VALIDITY_DESC
  SECURITY_FEATURE_ASC
  SECURITY_FEATURE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Medicament` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MedicamentCondition {
  """Checks for equality with the object’s `medicamentId` field."""
  medicamentId: Int

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `supplement` field."""
  supplement: String

  """Checks for equality with the object’s `strength` field."""
  strength: String

  """Checks for equality with the object’s `packaging` field."""
  packaging: Int

  """Checks for equality with the object’s `holderCode` field."""
  holderCode: String

  """Checks for equality with the object’s `stateCode` field."""
  stateCode: String

  """Checks for equality with the object’s `atcCode` field."""
  atcCode: String

  """Checks for equality with the object’s `atcTitleSk` field."""
  atcTitleSk: String

  """Checks for equality with the object’s `indicationGroup` field."""
  indicationGroup: String

  """Checks for equality with the object’s `regNumber` field."""
  regNumber: String

  """Checks for equality with the object’s `expiration` field."""
  expiration: String

  """Checks for equality with the object’s `dispensing` field."""
  dispensing: String

  """Checks for equality with the object’s `registrationType` field."""
  registrationType: String

  """Checks for equality with the object’s `regDate` field."""
  regDate: String

  """Checks for equality with the object’s `validity` field."""
  validity: String

  """Checks for equality with the object’s `securityFeature` field."""
  securityFeature: String
}

"""
A filter to be used against `Medicament` object types. All fields are combined with a logical ‘and.’
"""
input MedicamentFilter {
  """Filter by the object’s `medicamentId` field."""
  medicamentId: IntFilter

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `supplement` field."""
  supplement: StringFilter

  """Filter by the object’s `strength` field."""
  strength: StringFilter

  """Filter by the object’s `packaging` field."""
  packaging: IntFilter

  """Filter by the object’s `holderCode` field."""
  holderCode: StringFilter

  """Filter by the object’s `stateCode` field."""
  stateCode: StringFilter

  """Filter by the object’s `atcCode` field."""
  atcCode: StringFilter

  """Filter by the object’s `atcTitleSk` field."""
  atcTitleSk: StringFilter

  """Filter by the object’s `indicationGroup` field."""
  indicationGroup: StringFilter

  """Filter by the object’s `regNumber` field."""
  regNumber: StringFilter

  """Filter by the object’s `expiration` field."""
  expiration: StringFilter

  """Filter by the object’s `dispensing` field."""
  dispensing: StringFilter

  """Filter by the object’s `registrationType` field."""
  registrationType: StringFilter

  """Filter by the object’s `regDate` field."""
  regDate: StringFilter

  """Filter by the object’s `validity` field."""
  validity: StringFilter

  """Filter by the object’s `securityFeature` field."""
  securityFeature: StringFilter

  """Checks for all expressions in this list."""
  and: [MedicamentFilter!]

  """Checks for any expressions in this list."""
  or: [MedicamentFilter!]

  """Negates the expression."""
  not: MedicamentFilter
}

"""
A connection to a list of `BloodCount` values, with data from `BloodCountUser`.
"""
type UserBloodCountsByBloodCountUserUserIdAndBloodCountIdManyToManyConnection {
  """A list of `BloodCount` objects."""
  nodes: [BloodCount]!

  """
  A list of edges which contains the `BloodCount`, info from the `BloodCountUser`, and the cursor to aid in pagination.
  """
  edges: [UserBloodCountsByBloodCountUserUserIdAndBloodCountIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodCount` you could get from the connection."""
  totalCount: Int!
}

type BloodCount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  valueId: Int!
  acronym: String!
  title: String!
  men: BigFloatRange!
  women: BigFloatRange!
  units: String
  source: String!
  description: String

  """Reads and enables pagination through a set of `BloodCountUser`."""
  bloodCountUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserFilter
  ): BloodCountUsersConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByBloodCountUserBloodCountIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): BloodCountUsersByBloodCountUserBloodCountIdAndUserIdManyToManyConnection!
}

"""A range of `BigFloat`."""
type BigFloatRange {
  """The starting bound of our range."""
  start: BigFloatRangeBound

  """The ending bound of our range."""
  end: BigFloatRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type BigFloatRangeBound {
  """The value at one end of our range."""
  value: BigFloat!

  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A connection to a list of `User` values, with data from `BloodCountUser`.
"""
type BloodCountUsersByBloodCountUserBloodCountIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `BloodCountUser`, and the cursor to aid in pagination.
  """
  edges: [BloodCountUsersByBloodCountUserBloodCountIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `BloodCountUser`."""
type BloodCountUsersByBloodCountUserBloodCountIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
  bloodCountUserId: Int!
}

"""
A `BloodCount` edge in the connection, with data from `BloodCountUser`.
"""
type UserBloodCountsByBloodCountUserUserIdAndBloodCountIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodCount` at the end of the edge."""
  node: BloodCount
  bloodCountUserId: Int!
}

"""Methods to use when ordering `BloodCount`."""
enum BloodCountsOrderBy {
  NATURAL
  VALUE_ID_ASC
  VALUE_ID_DESC
  ACRONYM_ASC
  ACRONYM_DESC
  TITLE_ASC
  TITLE_DESC
  MEN_ASC
  MEN_DESC
  WOMEN_ASC
  WOMEN_DESC
  UNITS_ASC
  UNITS_DESC
  SOURCE_ASC
  SOURCE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BloodCount` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BloodCountCondition {
  """Checks for equality with the object’s `valueId` field."""
  valueId: Int

  """Checks for equality with the object’s `acronym` field."""
  acronym: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `men` field."""
  men: BigFloatRangeInput

  """Checks for equality with the object’s `women` field."""
  women: BigFloatRangeInput

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A range of `BigFloat`."""
input BigFloatRangeInput {
  """The starting bound of our range."""
  start: BigFloatRangeBoundInput

  """The ending bound of our range."""
  end: BigFloatRangeBoundInput
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input BigFloatRangeBoundInput {
  """The value at one end of our range."""
  value: BigFloat!

  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!
}

"""
A filter to be used against `BloodCount` object types. All fields are combined with a logical ‘and.’
"""
input BloodCountFilter {
  """Filter by the object’s `valueId` field."""
  valueId: IntFilter

  """Filter by the object’s `acronym` field."""
  acronym: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `men` field."""
  men: BigFloatRangeFilter

  """Filter by the object’s `women` field."""
  women: BigFloatRangeFilter

  """Filter by the object’s `units` field."""
  units: StringFilter

  """Filter by the object’s `source` field."""
  source: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [BloodCountFilter!]

  """Checks for any expressions in this list."""
  or: [BloodCountFilter!]

  """Negates the expression."""
  not: BloodCountFilter
}

"""
A filter to be used against BigFloatRange fields. All fields are combined with a logical ‘and.’
"""
input BigFloatRangeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloatRangeInput

  """Not equal to the specified value."""
  notEqualTo: BigFloatRangeInput

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloatRangeInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloatRangeInput

  """Included in the specified list."""
  in: [BigFloatRangeInput!]

  """Not included in the specified list."""
  notIn: [BigFloatRangeInput!]

  """Less than the specified value."""
  lessThan: BigFloatRangeInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloatRangeInput

  """Greater than the specified value."""
  greaterThan: BigFloatRangeInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloatRangeInput

  """Contains the specified range."""
  contains: BigFloatRangeInput

  """Contains the specified value."""
  containsElement: BigFloat

  """Contained by the specified range."""
  containedBy: BigFloatRangeInput

  """Overlaps the specified range."""
  overlaps: BigFloatRangeInput

  """Strictly left of the specified range."""
  strictlyLeftOf: BigFloatRangeInput

  """Strictly right of the specified range."""
  strictlyRightOf: BigFloatRangeInput

  """Does not extend right of the specified range."""
  notExtendsRightOf: BigFloatRangeInput

  """Does not extend left of the specified range."""
  notExtendsLeftOf: BigFloatRangeInput

  """Adjacent to the specified range."""
  adjacentTo: BigFloatRangeInput
}

"""Methods to use when ordering `BloodCountUserValue`."""
enum BloodCountUserValuesOrderBy {
  NATURAL
  BLOOD_COUNT_USER_VALUE_ID_ASC
  BLOOD_COUNT_USER_VALUE_ID_DESC
  BLOOD_COUNT_USER_ID_ASC
  BLOOD_COUNT_USER_ID_DESC
  MEETING_ID_ASC
  MEETING_ID_DESC
  BLOOD_COUNT_VALUE_ASC
  BLOOD_COUNT_VALUE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BloodCountUserValue` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input BloodCountUserValueCondition {
  """Checks for equality with the object’s `bloodCountUserValueId` field."""
  bloodCountUserValueId: Int

  """Checks for equality with the object’s `bloodCountUserId` field."""
  bloodCountUserId: Int

  """Checks for equality with the object’s `meetingId` field."""
  meetingId: Int

  """Checks for equality with the object’s `bloodCountValue` field."""
  bloodCountValue: Float

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Date
}

"""
A filter to be used against `BloodCountUserValue` object types. All fields are combined with a logical ‘and.’
"""
input BloodCountUserValueFilter {
  """Filter by the object’s `bloodCountUserValueId` field."""
  bloodCountUserValueId: IntFilter

  """Filter by the object’s `bloodCountUserId` field."""
  bloodCountUserId: IntFilter

  """Filter by the object’s `meetingId` field."""
  meetingId: IntFilter

  """Filter by the object’s `bloodCountValue` field."""
  bloodCountValue: FloatFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DateFilter

  """Checks for all expressions in this list."""
  and: [BloodCountUserValueFilter!]

  """Checks for any expressions in this list."""
  or: [BloodCountUserValueFilter!]

  """Negates the expression."""
  not: BloodCountUserValueFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A connection to a list of `Meeting` values, with data from `BloodCountUserValue`.
"""
type BloodCountUserMeetingsByBloodCountUserValueBloodCountUserIdAndMeetingIdManyToManyConnection {
  """A list of `Meeting` objects."""
  nodes: [Meeting]!

  """
  A list of edges which contains the `Meeting`, info from the `BloodCountUserValue`, and the cursor to aid in pagination.
  """
  edges: [BloodCountUserMeetingsByBloodCountUserValueBloodCountUserIdAndMeetingIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Meeting` you could get from the connection."""
  totalCount: Int!
}

"""
A `Meeting` edge in the connection, with data from `BloodCountUserValue`.
"""
type BloodCountUserMeetingsByBloodCountUserValueBloodCountUserIdAndMeetingIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Meeting` at the end of the edge."""
  node: Meeting

  """Reads and enables pagination through a set of `BloodCountUserValue`."""
  bloodCountUserValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserValueFilter
  ): BloodCountUserValuesConnection!
}

"""Methods to use when ordering `Meeting`."""
enum MeetingsOrderBy {
  NATURAL
  MEETING_ID_ASC
  MEETING_ID_DESC
  MEETING_DATE_ASC
  MEETING_DATE_DESC
  NOTE_ASC
  NOTE_DESC
  USER_ID_ASC
  USER_ID_DESC
  ADMIN_ID_ASC
  ADMIN_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Meeting` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MeetingCondition {
  """Checks for equality with the object’s `meetingId` field."""
  meetingId: Int

  """Checks for equality with the object’s `meetingDate` field."""
  meetingDate: Date

  """Checks for equality with the object’s `note` field."""
  note: String

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `adminId` field."""
  adminId: Int
}

"""
A filter to be used against `Meeting` object types. All fields are combined with a logical ‘and.’
"""
input MeetingFilter {
  """Filter by the object’s `meetingId` field."""
  meetingId: IntFilter

  """Filter by the object’s `meetingDate` field."""
  meetingDate: DateFilter

  """Filter by the object’s `note` field."""
  note: StringFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `adminId` field."""
  adminId: IntFilter

  """Checks for all expressions in this list."""
  and: [MeetingFilter!]

  """Checks for any expressions in this list."""
  or: [MeetingFilter!]

  """Negates the expression."""
  not: MeetingFilter
}

"""A `BloodCountUserValue` edge in the connection."""
type BloodCountUserValuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodCountUserValue` at the end of the edge."""
  node: BloodCountUserValue
}

"""
A connection to a list of `BloodCountUser` values, with data from `BloodCountUserValue`.
"""
type MeetingBloodCountUsersByBloodCountUserValueMeetingIdAndBloodCountUserIdManyToManyConnection {
  """A list of `BloodCountUser` objects."""
  nodes: [BloodCountUser]!

  """
  A list of edges which contains the `BloodCountUser`, info from the `BloodCountUserValue`, and the cursor to aid in pagination.
  """
  edges: [MeetingBloodCountUsersByBloodCountUserValueMeetingIdAndBloodCountUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodCountUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `BloodCountUser` edge in the connection, with data from `BloodCountUserValue`.
"""
type MeetingBloodCountUsersByBloodCountUserValueMeetingIdAndBloodCountUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodCountUser` at the end of the edge."""
  node: BloodCountUser

  """Reads and enables pagination through a set of `BloodCountUserValue`."""
  bloodCountUserValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BloodCountUserValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BloodCountUserValueFilter
  ): BloodCountUserValuesConnection!
}

"""A `Meeting` edge in the connection."""
type MeetingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Meeting` at the end of the edge."""
  node: Meeting
}

"""
A connection to a list of `Medicament` values, with data from `AdminMedicamentDescription`.
"""
type AdminMedicamentsByAdminMedicamentDescriptionAdminIdAndMedicamentIdManyToManyConnection {
  """A list of `Medicament` objects."""
  nodes: [Medicament]!

  """
  A list of edges which contains the `Medicament`, info from the `AdminMedicamentDescription`, and the cursor to aid in pagination.
  """
  edges: [AdminMedicamentsByAdminMedicamentDescriptionAdminIdAndMedicamentIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Medicament` you could get from the connection."""
  totalCount: Int!
}

"""
A `Medicament` edge in the connection, with data from `AdminMedicamentDescription`.
"""
type AdminMedicamentsByAdminMedicamentDescriptionAdminIdAndMedicamentIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Medicament` at the end of the edge."""
  node: Medicament

  """
  Reads and enables pagination through a set of `AdminMedicamentDescription`.
  """
  adminMedicamentDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdminMedicamentDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdminMedicamentDescriptionFilter
  ): AdminMedicamentDescriptionsConnection!
}

"""A `Admin` edge in the connection."""
type AdminsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Admin` at the end of the edge."""
  node: Admin
}

"""A connection to a list of `Ambulance` values."""
type AmbulancesConnection {
  """A list of `Ambulance` objects."""
  nodes: [Ambulance]!

  """
  A list of edges which contains the `Ambulance` and cursor to aid in pagination.
  """
  edges: [AmbulancesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ambulance` you could get from the connection."""
  totalCount: Int!
}

"""A `Ambulance` edge in the connection."""
type AmbulancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ambulance` at the end of the edge."""
  node: Ambulance
}

"""Methods to use when ordering `Ambulance`."""
enum AmbulancesOrderBy {
  NATURAL
  AMBULANCE_ID_ASC
  AMBULANCE_ID_DESC
  NAME_ASC
  NAME_DESC
  ICO_ASC
  ICO_DESC
  CITY_ASC
  CITY_DESC
  STREET_ASC
  STREET_DESC
  STATE_ASC
  STATE_DESC
  SUITE_ASC
  SUITE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Ambulance` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AmbulanceCondition {
  """Checks for equality with the object’s `ambulanceId` field."""
  ambulanceId: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ico` field."""
  ico: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `street` field."""
  street: String

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `suite` field."""
  suite: String
}

"""
A filter to be used against `Ambulance` object types. All fields are combined with a logical ‘and.’
"""
input AmbulanceFilter {
  """Filter by the object’s `ambulanceId` field."""
  ambulanceId: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `ico` field."""
  ico: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `street` field."""
  street: StringFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `suite` field."""
  suite: StringFilter

  """Checks for all expressions in this list."""
  and: [AmbulanceFilter!]

  """Checks for any expressions in this list."""
  or: [AmbulanceFilter!]

  """Negates the expression."""
  not: AmbulanceFilter
}

"""A connection to a list of `BloodCount` values."""
type BloodCountsConnection {
  """A list of `BloodCount` objects."""
  nodes: [BloodCount]!

  """
  A list of edges which contains the `BloodCount` and cursor to aid in pagination.
  """
  edges: [BloodCountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodCount` you could get from the connection."""
  totalCount: Int!
}

"""A `BloodCount` edge in the connection."""
type BloodCountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodCount` at the end of the edge."""
  node: BloodCount
}

"""A connection to a list of `BloodType` values."""
type BloodTypesConnection {
  """A list of `BloodType` objects."""
  nodes: [BloodType]!

  """
  A list of edges which contains the `BloodType` and cursor to aid in pagination.
  """
  edges: [BloodTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BloodType` you could get from the connection."""
  totalCount: Int!
}

"""A `BloodType` edge in the connection."""
type BloodTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BloodType` at the end of the edge."""
  node: BloodType
}

"""A connection to a list of `DiagnosisGroup` values."""
type DiagnosisGroupsConnection {
  """A list of `DiagnosisGroup` objects."""
  nodes: [DiagnosisGroup]!

  """
  A list of edges which contains the `DiagnosisGroup` and cursor to aid in pagination.
  """
  edges: [DiagnosisGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DiagnosisGroup` you could get from the connection."""
  totalCount: Int!
}

"""A `DiagnosisGroup` edge in the connection."""
type DiagnosisGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DiagnosisGroup` at the end of the edge."""
  node: DiagnosisGroup
}

"""A connection to a list of `InsuranceCompany` values."""
type InsuranceCompaniesConnection {
  """A list of `InsuranceCompany` objects."""
  nodes: [InsuranceCompany]!

  """
  A list of edges which contains the `InsuranceCompany` and cursor to aid in pagination.
  """
  edges: [InsuranceCompaniesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InsuranceCompany` you could get from the connection.
  """
  totalCount: Int!
}

"""A `InsuranceCompany` edge in the connection."""
type InsuranceCompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InsuranceCompany` at the end of the edge."""
  node: InsuranceCompany
}

"""A connection to a list of `Medicament` values."""
type MedicamentsConnection {
  """A list of `Medicament` objects."""
  nodes: [Medicament]!

  """
  A list of edges which contains the `Medicament` and cursor to aid in pagination.
  """
  edges: [MedicamentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Medicament` you could get from the connection."""
  totalCount: Int!
}

"""A `Medicament` edge in the connection."""
type MedicamentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Medicament` at the end of the edge."""
  node: Medicament
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Admin`."""
  createAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdminInput!
  ): CreateAdminPayload

  """Creates a single `AdminMedicamentDescription`."""
  createAdminMedicamentDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdminMedicamentDescriptionInput!
  ): CreateAdminMedicamentDescriptionPayload

  """Creates a single `Ambulance`."""
  createAmbulance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAmbulanceInput!
  ): CreateAmbulancePayload

  """Creates a single `BloodCount`."""
  createBloodCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBloodCountInput!
  ): CreateBloodCountPayload

  """Creates a single `BloodCountUser`."""
  createBloodCountUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBloodCountUserInput!
  ): CreateBloodCountUserPayload

  """Creates a single `BloodCountUserValue`."""
  createBloodCountUserValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBloodCountUserValueInput!
  ): CreateBloodCountUserValuePayload

  """Creates a single `BloodType`."""
  createBloodType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBloodTypeInput!
  ): CreateBloodTypePayload

  """Creates a single `Diagnosis`."""
  createDiagnosis(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDiagnosisInput!
  ): CreateDiagnosisPayload

  """Creates a single `DiagnosisCategory`."""
  createDiagnosisCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDiagnosisCategoryInput!
  ): CreateDiagnosisCategoryPayload

  """Creates a single `DiagnosisGroup`."""
  createDiagnosisGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDiagnosisGroupInput!
  ): CreateDiagnosisGroupPayload

  """Creates a single `InsuranceCompany`."""
  createInsuranceCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInsuranceCompanyInput!
  ): CreateInsuranceCompanyPayload

  """Creates a single `Medicament`."""
  createMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMedicamentInput!
  ): CreateMedicamentPayload

  """Creates a single `Meeting`."""
  createMeeting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMeetingInput!
  ): CreateMeetingPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserDiagnosis`."""
  createUserDiagnosis(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserDiagnosisInput!
  ): CreateUserDiagnosisPayload

  """Creates a single `UserMedicament`."""
  createUserMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserMedicamentInput!
  ): CreateUserMedicamentPayload

  """Creates a single `UserMedicamentTime`."""
  createUserMedicamentTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserMedicamentTimeInput!
  ): CreateUserMedicamentTimePayload

  """Updates a single `Admin` using its globally unique id and a patch."""
  updateAdminByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdminByNodeIdInput!
  ): UpdateAdminPayload

  """Updates a single `Admin` using a unique key and a patch."""
  updateAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdminInput!
  ): UpdateAdminPayload

  """
  Updates a single `AdminMedicamentDescription` using its globally unique id and a patch.
  """
  updateAdminMedicamentDescriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdminMedicamentDescriptionByNodeIdInput!
  ): UpdateAdminMedicamentDescriptionPayload

  """
  Updates a single `AdminMedicamentDescription` using a unique key and a patch.
  """
  updateAdminMedicamentDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdminMedicamentDescriptionInput!
  ): UpdateAdminMedicamentDescriptionPayload

  """Updates a single `Ambulance` using its globally unique id and a patch."""
  updateAmbulanceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmbulanceByNodeIdInput!
  ): UpdateAmbulancePayload

  """Updates a single `Ambulance` using a unique key and a patch."""
  updateAmbulance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmbulanceInput!
  ): UpdateAmbulancePayload

  """
  Updates a single `BloodCount` using its globally unique id and a patch.
  """
  updateBloodCountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountByNodeIdInput!
  ): UpdateBloodCountPayload

  """Updates a single `BloodCount` using a unique key and a patch."""
  updateBloodCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountInput!
  ): UpdateBloodCountPayload

  """
  Updates a single `BloodCountUser` using its globally unique id and a patch.
  """
  updateBloodCountUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountUserByNodeIdInput!
  ): UpdateBloodCountUserPayload

  """Updates a single `BloodCountUser` using a unique key and a patch."""
  updateBloodCountUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountUserInput!
  ): UpdateBloodCountUserPayload

  """Updates a single `BloodCountUser` using a unique key and a patch."""
  updateBloodCountUserByUserIdAndBloodCountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountUserByUserIdAndBloodCountIdInput!
  ): UpdateBloodCountUserPayload

  """
  Updates a single `BloodCountUserValue` using its globally unique id and a patch.
  """
  updateBloodCountUserValueByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountUserValueByNodeIdInput!
  ): UpdateBloodCountUserValuePayload

  """Updates a single `BloodCountUserValue` using a unique key and a patch."""
  updateBloodCountUserValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodCountUserValueInput!
  ): UpdateBloodCountUserValuePayload

  """Updates a single `BloodType` using its globally unique id and a patch."""
  updateBloodTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodTypeByNodeIdInput!
  ): UpdateBloodTypePayload

  """Updates a single `BloodType` using a unique key and a patch."""
  updateBloodType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBloodTypeInput!
  ): UpdateBloodTypePayload

  """Updates a single `Diagnosis` using its globally unique id and a patch."""
  updateDiagnosisByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisByNodeIdInput!
  ): UpdateDiagnosisPayload

  """Updates a single `Diagnosis` using a unique key and a patch."""
  updateDiagnosis(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisInput!
  ): UpdateDiagnosisPayload

  """
  Updates a single `DiagnosisCategory` using its globally unique id and a patch.
  """
  updateDiagnosisCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisCategoryByNodeIdInput!
  ): UpdateDiagnosisCategoryPayload

  """Updates a single `DiagnosisCategory` using a unique key and a patch."""
  updateDiagnosisCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisCategoryInput!
  ): UpdateDiagnosisCategoryPayload

  """
  Updates a single `DiagnosisGroup` using its globally unique id and a patch.
  """
  updateDiagnosisGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisGroupByNodeIdInput!
  ): UpdateDiagnosisGroupPayload

  """Updates a single `DiagnosisGroup` using a unique key and a patch."""
  updateDiagnosisGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDiagnosisGroupInput!
  ): UpdateDiagnosisGroupPayload

  """
  Updates a single `InsuranceCompany` using its globally unique id and a patch.
  """
  updateInsuranceCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInsuranceCompanyByNodeIdInput!
  ): UpdateInsuranceCompanyPayload

  """Updates a single `InsuranceCompany` using a unique key and a patch."""
  updateInsuranceCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInsuranceCompanyInput!
  ): UpdateInsuranceCompanyPayload

  """
  Updates a single `Medicament` using its globally unique id and a patch.
  """
  updateMedicamentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMedicamentByNodeIdInput!
  ): UpdateMedicamentPayload

  """Updates a single `Medicament` using a unique key and a patch."""
  updateMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMedicamentInput!
  ): UpdateMedicamentPayload

  """Updates a single `Meeting` using its globally unique id and a patch."""
  updateMeetingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMeetingByNodeIdInput!
  ): UpdateMeetingPayload

  """Updates a single `Meeting` using a unique key and a patch."""
  updateMeeting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMeetingInput!
  ): UpdateMeetingPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `UserMedicament` using its globally unique id and a patch.
  """
  updateUserMedicamentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserMedicamentByNodeIdInput!
  ): UpdateUserMedicamentPayload

  """Updates a single `UserMedicament` using a unique key and a patch."""
  updateUserMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserMedicamentInput!
  ): UpdateUserMedicamentPayload

  """Deletes a single `Admin` using its globally unique id."""
  deleteAdminByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdminByNodeIdInput!
  ): DeleteAdminPayload

  """Deletes a single `Admin` using a unique key."""
  deleteAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdminInput!
  ): DeleteAdminPayload

  """
  Deletes a single `AdminMedicamentDescription` using its globally unique id.
  """
  deleteAdminMedicamentDescriptionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdminMedicamentDescriptionByNodeIdInput!
  ): DeleteAdminMedicamentDescriptionPayload

  """Deletes a single `AdminMedicamentDescription` using a unique key."""
  deleteAdminMedicamentDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdminMedicamentDescriptionInput!
  ): DeleteAdminMedicamentDescriptionPayload

  """Deletes a single `Ambulance` using its globally unique id."""
  deleteAmbulanceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmbulanceByNodeIdInput!
  ): DeleteAmbulancePayload

  """Deletes a single `Ambulance` using a unique key."""
  deleteAmbulance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmbulanceInput!
  ): DeleteAmbulancePayload

  """Deletes a single `BloodCount` using its globally unique id."""
  deleteBloodCountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountByNodeIdInput!
  ): DeleteBloodCountPayload

  """Deletes a single `BloodCount` using a unique key."""
  deleteBloodCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountInput!
  ): DeleteBloodCountPayload

  """Deletes a single `BloodCountUser` using its globally unique id."""
  deleteBloodCountUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountUserByNodeIdInput!
  ): DeleteBloodCountUserPayload

  """Deletes a single `BloodCountUser` using a unique key."""
  deleteBloodCountUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountUserInput!
  ): DeleteBloodCountUserPayload

  """Deletes a single `BloodCountUser` using a unique key."""
  deleteBloodCountUserByUserIdAndBloodCountId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountUserByUserIdAndBloodCountIdInput!
  ): DeleteBloodCountUserPayload

  """Deletes a single `BloodCountUserValue` using its globally unique id."""
  deleteBloodCountUserValueByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountUserValueByNodeIdInput!
  ): DeleteBloodCountUserValuePayload

  """Deletes a single `BloodCountUserValue` using a unique key."""
  deleteBloodCountUserValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodCountUserValueInput!
  ): DeleteBloodCountUserValuePayload

  """Deletes a single `BloodType` using its globally unique id."""
  deleteBloodTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodTypeByNodeIdInput!
  ): DeleteBloodTypePayload

  """Deletes a single `BloodType` using a unique key."""
  deleteBloodType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBloodTypeInput!
  ): DeleteBloodTypePayload

  """Deletes a single `Diagnosis` using its globally unique id."""
  deleteDiagnosisByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisByNodeIdInput!
  ): DeleteDiagnosisPayload

  """Deletes a single `Diagnosis` using a unique key."""
  deleteDiagnosis(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisInput!
  ): DeleteDiagnosisPayload

  """Deletes a single `DiagnosisCategory` using its globally unique id."""
  deleteDiagnosisCategoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisCategoryByNodeIdInput!
  ): DeleteDiagnosisCategoryPayload

  """Deletes a single `DiagnosisCategory` using a unique key."""
  deleteDiagnosisCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisCategoryInput!
  ): DeleteDiagnosisCategoryPayload

  """Deletes a single `DiagnosisGroup` using its globally unique id."""
  deleteDiagnosisGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisGroupByNodeIdInput!
  ): DeleteDiagnosisGroupPayload

  """Deletes a single `DiagnosisGroup` using a unique key."""
  deleteDiagnosisGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDiagnosisGroupInput!
  ): DeleteDiagnosisGroupPayload

  """Deletes a single `InsuranceCompany` using its globally unique id."""
  deleteInsuranceCompanyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInsuranceCompanyByNodeIdInput!
  ): DeleteInsuranceCompanyPayload

  """Deletes a single `InsuranceCompany` using a unique key."""
  deleteInsuranceCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInsuranceCompanyInput!
  ): DeleteInsuranceCompanyPayload

  """Deletes a single `Medicament` using its globally unique id."""
  deleteMedicamentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMedicamentByNodeIdInput!
  ): DeleteMedicamentPayload

  """Deletes a single `Medicament` using a unique key."""
  deleteMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMedicamentInput!
  ): DeleteMedicamentPayload

  """Deletes a single `Meeting` using its globally unique id."""
  deleteMeetingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMeetingByNodeIdInput!
  ): DeleteMeetingPayload

  """Deletes a single `Meeting` using a unique key."""
  deleteMeeting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMeetingInput!
  ): DeleteMeetingPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `UserMedicament` using its globally unique id."""
  deleteUserMedicamentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserMedicamentByNodeIdInput!
  ): DeleteUserMedicamentPayload

  """Deletes a single `UserMedicament` using a unique key."""
  deleteUserMedicament(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserMedicamentInput!
  ): DeleteUserMedicamentPayload
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload
  authenticateadmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateadminInput!
  ): AuthenticateadminPayload
  registeradmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisteradminInput!
  ): RegisteradminPayload
  registeruser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisteruserInput!
  ): RegisteruserPayload
}

"""The output of our create `Admin` mutation."""
type CreateAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Admin` that was created by this mutation."""
  admin: Admin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ambulance` that is related to this `Admin`."""
  ambulance: Ambulance

  """An edge for our `Admin`. May be used by Relay 1."""
  adminEdge(
    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminsEdge
}

"""All input for the create `Admin` mutation."""
input CreateAdminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Admin` to be created by this mutation."""
  admin: AdminInput!
}

"""An input for mutations affecting `Admin`"""
input AdminInput {
  adminId: Int
  firstName: String!
  lastName: String!
  ambulanceId: String
  adminVerified: Boolean
  registrationDate: Date
  email: String
  phone: String
  lastLogin: Date
}

"""The output of our create `AdminMedicamentDescription` mutation."""
type CreateAdminMedicamentDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AdminMedicamentDescription` that was created by this mutation."""
  adminMedicamentDescription: AdminMedicamentDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Admin` that is related to this `AdminMedicamentDescription`.
  """
  admin: Admin

  """
  Reads a single `Medicament` that is related to this `AdminMedicamentDescription`.
  """
  medicament: Medicament

  """An edge for our `AdminMedicamentDescription`. May be used by Relay 1."""
  adminMedicamentDescriptionEdge(
    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminMedicamentDescriptionsEdge
}

"""All input for the create `AdminMedicamentDescription` mutation."""
input CreateAdminMedicamentDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AdminMedicamentDescription` to be created by this mutation."""
  adminMedicamentDescription: AdminMedicamentDescriptionInput!
}

"""An input for mutations affecting `AdminMedicamentDescription`"""
input AdminMedicamentDescriptionInput {
  adminMedicamentDescriptionId: Int
  adminId: Int
  medicamentId: Int
  description: String!
}

"""The output of our create `Ambulance` mutation."""
type CreateAmbulancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ambulance` that was created by this mutation."""
  ambulance: Ambulance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Ambulance`. May be used by Relay 1."""
  ambulanceEdge(
    """The method to use when ordering `Ambulance`."""
    orderBy: [AmbulancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmbulancesEdge
}

"""All input for the create `Ambulance` mutation."""
input CreateAmbulanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ambulance` to be created by this mutation."""
  ambulance: AmbulanceInput!
}

"""An input for mutations affecting `Ambulance`"""
input AmbulanceInput {
  ambulanceId: String!
  name: String!
  ico: String!
  city: String!
  street: String!
  state: String!
  suite: String!
}

"""The output of our create `BloodCount` mutation."""
type CreateBloodCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCount` that was created by this mutation."""
  bloodCount: BloodCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodCount`. May be used by Relay 1."""
  bloodCountEdge(
    """The method to use when ordering `BloodCount`."""
    orderBy: [BloodCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountsEdge
}

"""All input for the create `BloodCount` mutation."""
input CreateBloodCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BloodCount` to be created by this mutation."""
  bloodCount: BloodCountInput!
}

"""An input for mutations affecting `BloodCount`"""
input BloodCountInput {
  valueId: Int
  acronym: String!
  title: String!
  men: BigFloatRangeInput!
  women: BigFloatRangeInput!
  units: String
  source: String!
  description: String
}

"""The output of our create `BloodCountUser` mutation."""
type CreateBloodCountUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUser` that was created by this mutation."""
  bloodCountUser: BloodCountUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `BloodCountUser`."""
  user: User

  """Reads a single `BloodCount` that is related to this `BloodCountUser`."""
  bloodCount: BloodCount

  """An edge for our `BloodCountUser`. May be used by Relay 1."""
  bloodCountUserEdge(
    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUsersEdge
}

"""All input for the create `BloodCountUser` mutation."""
input CreateBloodCountUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BloodCountUser` to be created by this mutation."""
  bloodCountUser: BloodCountUserInput!
}

"""An input for mutations affecting `BloodCountUser`"""
input BloodCountUserInput {
  bloodCountUserId: Int
  userId: Int!
  bloodCountId: Int!
}

"""The output of our create `BloodCountUserValue` mutation."""
type CreateBloodCountUserValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUserValue` that was created by this mutation."""
  bloodCountUserValue: BloodCountUserValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `BloodCountUser` that is related to this `BloodCountUserValue`.
  """
  bloodCountUser: BloodCountUser

  """
  Reads a single `Meeting` that is related to this `BloodCountUserValue`.
  """
  meeting: Meeting

  """An edge for our `BloodCountUserValue`. May be used by Relay 1."""
  bloodCountUserValueEdge(
    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUserValuesEdge
}

"""All input for the create `BloodCountUserValue` mutation."""
input CreateBloodCountUserValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BloodCountUserValue` to be created by this mutation."""
  bloodCountUserValue: BloodCountUserValueInput!
}

"""An input for mutations affecting `BloodCountUserValue`"""
input BloodCountUserValueInput {
  bloodCountUserValueId: Int
  bloodCountUserId: Int!
  meetingId: Int
  bloodCountValue: Float!
  description: String
  createdAt: Date
}

"""The output of our create `BloodType` mutation."""
type CreateBloodTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodType` that was created by this mutation."""
  bloodType: BloodType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodType`. May be used by Relay 1."""
  bloodTypeEdge(
    """The method to use when ordering `BloodType`."""
    orderBy: [BloodTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodTypesEdge
}

"""All input for the create `BloodType` mutation."""
input CreateBloodTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BloodType` to be created by this mutation."""
  bloodType: BloodTypeInput!
}

"""An input for mutations affecting `BloodType`"""
input BloodTypeInput {
  bloodTypeId: Int!
  name: String!
}

"""The output of our create `Diagnosis` mutation."""
type CreateDiagnosisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Diagnosis` that was created by this mutation."""
  diagnosis: Diagnosis

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisCategory` that is related to this `Diagnosis`.
  """
  diagnosisCategory: DiagnosisCategory

  """Reads a single `DiagnosisGroup` that is related to this `Diagnosis`."""
  diagnosisGroup: DiagnosisGroup

  """An edge for our `Diagnosis`. May be used by Relay 1."""
  diagnosisEdge(
    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosesEdge
}

"""All input for the create `Diagnosis` mutation."""
input CreateDiagnosisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Diagnosis` to be created by this mutation."""
  diagnosis: DiagnosisInput!
}

"""An input for mutations affecting `Diagnosis`"""
input DiagnosisInput {
  diagnosisId: String!
  name: String!
  diagnosisCategoryId: String!
  diagnosisGroupId: String!
  description: String
}

"""The output of our create `DiagnosisCategory` mutation."""
type CreateDiagnosisCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisCategory` that was created by this mutation."""
  diagnosisCategory: DiagnosisCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisGroup` that is related to this `DiagnosisCategory`.
  """
  diagnosisGroup: DiagnosisGroup

  """An edge for our `DiagnosisCategory`. May be used by Relay 1."""
  diagnosisCategoryEdge(
    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisCategoriesEdge
}

"""All input for the create `DiagnosisCategory` mutation."""
input CreateDiagnosisCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DiagnosisCategory` to be created by this mutation."""
  diagnosisCategory: DiagnosisCategoryInput!
}

"""An input for mutations affecting `DiagnosisCategory`"""
input DiagnosisCategoryInput {
  diagnosisCategoryId: String!
  name: String!
  diagnosisGroupId: String!
  description: String
}

"""The output of our create `DiagnosisGroup` mutation."""
type CreateDiagnosisGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisGroup` that was created by this mutation."""
  diagnosisGroup: DiagnosisGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DiagnosisGroup`. May be used by Relay 1."""
  diagnosisGroupEdge(
    """The method to use when ordering `DiagnosisGroup`."""
    orderBy: [DiagnosisGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisGroupsEdge
}

"""All input for the create `DiagnosisGroup` mutation."""
input CreateDiagnosisGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DiagnosisGroup` to be created by this mutation."""
  diagnosisGroup: DiagnosisGroupInput!
}

"""An input for mutations affecting `DiagnosisGroup`"""
input DiagnosisGroupInput {
  diagnosisGroupId: String!
  name: String!
  description: String
}

"""The output of our create `InsuranceCompany` mutation."""
type CreateInsuranceCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InsuranceCompany` that was created by this mutation."""
  insuranceCompany: InsuranceCompany

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InsuranceCompany`. May be used by Relay 1."""
  insuranceCompanyEdge(
    """The method to use when ordering `InsuranceCompany`."""
    orderBy: [InsuranceCompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InsuranceCompaniesEdge
}

"""All input for the create `InsuranceCompany` mutation."""
input CreateInsuranceCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InsuranceCompany` to be created by this mutation."""
  insuranceCompany: InsuranceCompanyInput!
}

"""An input for mutations affecting `InsuranceCompany`"""
input InsuranceCompanyInput {
  insuranceCompanyId: Int!
  name: String!
}

"""The output of our create `Medicament` mutation."""
type CreateMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Medicament` that was created by this mutation."""
  medicament: Medicament

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Medicament`. May be used by Relay 1."""
  medicamentEdge(
    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MedicamentsEdge
}

"""All input for the create `Medicament` mutation."""
input CreateMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Medicament` to be created by this mutation."""
  medicament: MedicamentInput!
}

"""An input for mutations affecting `Medicament`"""
input MedicamentInput {
  medicamentId: Int
  code: String!
  title: String!
  supplement: String
  strength: String
  packaging: Int
  holderCode: String
  stateCode: String
  atcCode: String
  atcTitleSk: String
  indicationGroup: String
  regNumber: String
  expiration: String
  dispensing: String
  registrationType: String
  regDate: String
  validity: String
  securityFeature: String
}

"""The output of our create `Meeting` mutation."""
type CreateMeetingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meeting` that was created by this mutation."""
  meeting: Meeting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Admin` that is related to this `Meeting`."""
  admin: Admin

  """An edge for our `Meeting`. May be used by Relay 1."""
  meetingEdge(
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeetingsEdge
}

"""All input for the create `Meeting` mutation."""
input CreateMeetingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Meeting` to be created by this mutation."""
  meeting: MeetingInput!
}

"""An input for mutations affecting `Meeting`"""
input MeetingInput {
  meetingId: Int
  meetingDate: Date!
  note: String
  userId: String!
  adminId: Int!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `InsuranceCompany` that is related to this `User`."""
  insuranceCompany: InsuranceCompany

  """Reads a single `BloodType` that is related to this `User`."""
  bloodType: BloodType

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  userId: Int
  foreName: String!
  surName: String!
  identNumber: String
  insuranceNumber: String
  email: String
  phone: String
  birthdate: Date
  verified: Boolean
  insuranceCompanyId: Int
  lastLogin: Date
  bloodTypeId: Int
  rhD: Boolean
  registeredAt: Date
}

"""The output of our create `UserDiagnosis` mutation."""
type CreateUserDiagnosisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserDiagnosis` that was created by this mutation."""
  userDiagnosis: UserDiagnosis

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserDiagnosis`."""
  user: User

  """Reads a single `Diagnosis` that is related to this `UserDiagnosis`."""
  diagnosis: Diagnosis

  """An edge for our `UserDiagnosis`. May be used by Relay 1."""
  userDiagnosisEdge(
    """The method to use when ordering `UserDiagnosis`."""
    orderBy: [UserDiagnosesOrderBy!] = [NATURAL]
  ): UserDiagnosesEdge
}

"""All input for the create `UserDiagnosis` mutation."""
input CreateUserDiagnosisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserDiagnosis` to be created by this mutation."""
  userDiagnosis: UserDiagnosisInput!
}

"""An input for mutations affecting `UserDiagnosis`"""
input UserDiagnosisInput {
  userId: Int!
  diagnosisId: String!
}

"""The output of our create `UserMedicament` mutation."""
type CreateUserMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserMedicament` that was created by this mutation."""
  userMedicament: UserMedicament

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserMedicament`."""
  user: User

  """Reads a single `Medicament` that is related to this `UserMedicament`."""
  medicament: Medicament

  """An edge for our `UserMedicament`. May be used by Relay 1."""
  userMedicamentEdge(
    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserMedicamentsEdge
}

"""All input for the create `UserMedicament` mutation."""
input CreateUserMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserMedicament` to be created by this mutation."""
  userMedicament: UserMedicamentInput!
}

"""An input for mutations affecting `UserMedicament`"""
input UserMedicamentInput {
  userMedicamentId: Int
  userId: Int!
  medicamentId: Int!
}

"""The output of our create `UserMedicamentTime` mutation."""
type CreateUserMedicamentTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserMedicamentTime` that was created by this mutation."""
  userMedicamentTime: UserMedicamentTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `UserMedicament` that is related to this `UserMedicamentTime`.
  """
  userMedicament: UserMedicament

  """An edge for our `UserMedicamentTime`. May be used by Relay 1."""
  userMedicamentTimeEdge(
    """The method to use when ordering `UserMedicamentTime`."""
    orderBy: [UserMedicamentTimesOrderBy!] = [NATURAL]
  ): UserMedicamentTimesEdge
}

"""All input for the create `UserMedicamentTime` mutation."""
input CreateUserMedicamentTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserMedicamentTime` to be created by this mutation."""
  userMedicamentTime: UserMedicamentTimeInput!
}

"""An input for mutations affecting `UserMedicamentTime`"""
input UserMedicamentTimeInput {
  time: String
  dosing: Int
  userMedicamentId: Int!
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
}

"""The output of our update `Admin` mutation."""
type UpdateAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Admin` that was updated by this mutation."""
  admin: Admin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ambulance` that is related to this `Admin`."""
  ambulance: Ambulance

  """An edge for our `Admin`. May be used by Relay 1."""
  adminEdge(
    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminsEdge
}

"""All input for the `updateAdminByNodeId` mutation."""
input UpdateAdminByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Admin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Admin` being updated.
  """
  patch: AdminPatch!
}

"""
Represents an update to a `Admin`. Fields that are set will be updated.
"""
input AdminPatch {
  adminId: Int
  firstName: String
  lastName: String
  ambulanceId: String
  adminVerified: Boolean
  registrationDate: Date
  email: String
  phone: String
  lastLogin: Date
}

"""All input for the `updateAdmin` mutation."""
input UpdateAdminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Admin` being updated.
  """
  patch: AdminPatch!
  adminId: Int!
}

"""The output of our update `AdminMedicamentDescription` mutation."""
type UpdateAdminMedicamentDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AdminMedicamentDescription` that was updated by this mutation."""
  adminMedicamentDescription: AdminMedicamentDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Admin` that is related to this `AdminMedicamentDescription`.
  """
  admin: Admin

  """
  Reads a single `Medicament` that is related to this `AdminMedicamentDescription`.
  """
  medicament: Medicament

  """An edge for our `AdminMedicamentDescription`. May be used by Relay 1."""
  adminMedicamentDescriptionEdge(
    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminMedicamentDescriptionsEdge
}

"""All input for the `updateAdminMedicamentDescriptionByNodeId` mutation."""
input UpdateAdminMedicamentDescriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdminMedicamentDescription` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AdminMedicamentDescription` being updated.
  """
  patch: AdminMedicamentDescriptionPatch!
}

"""
Represents an update to a `AdminMedicamentDescription`. Fields that are set will be updated.
"""
input AdminMedicamentDescriptionPatch {
  adminMedicamentDescriptionId: Int
  adminId: Int
  medicamentId: Int
  description: String
}

"""All input for the `updateAdminMedicamentDescription` mutation."""
input UpdateAdminMedicamentDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AdminMedicamentDescription` being updated.
  """
  patch: AdminMedicamentDescriptionPatch!
  adminMedicamentDescriptionId: Int!
}

"""The output of our update `Ambulance` mutation."""
type UpdateAmbulancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ambulance` that was updated by this mutation."""
  ambulance: Ambulance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Ambulance`. May be used by Relay 1."""
  ambulanceEdge(
    """The method to use when ordering `Ambulance`."""
    orderBy: [AmbulancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmbulancesEdge
}

"""All input for the `updateAmbulanceByNodeId` mutation."""
input UpdateAmbulanceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ambulance` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Ambulance` being updated.
  """
  patch: AmbulancePatch!
}

"""
Represents an update to a `Ambulance`. Fields that are set will be updated.
"""
input AmbulancePatch {
  ambulanceId: String
  name: String
  ico: String
  city: String
  street: String
  state: String
  suite: String
}

"""All input for the `updateAmbulance` mutation."""
input UpdateAmbulanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Ambulance` being updated.
  """
  patch: AmbulancePatch!
  ambulanceId: String!
}

"""The output of our update `BloodCount` mutation."""
type UpdateBloodCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCount` that was updated by this mutation."""
  bloodCount: BloodCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodCount`. May be used by Relay 1."""
  bloodCountEdge(
    """The method to use when ordering `BloodCount`."""
    orderBy: [BloodCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountsEdge
}

"""All input for the `updateBloodCountByNodeId` mutation."""
input UpdateBloodCountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BloodCount` being updated.
  """
  patch: BloodCountPatch!
}

"""
Represents an update to a `BloodCount`. Fields that are set will be updated.
"""
input BloodCountPatch {
  valueId: Int
  acronym: String
  title: String
  men: BigFloatRangeInput
  women: BigFloatRangeInput
  units: String
  source: String
  description: String
}

"""All input for the `updateBloodCount` mutation."""
input UpdateBloodCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BloodCount` being updated.
  """
  patch: BloodCountPatch!
  valueId: Int!
}

"""The output of our update `BloodCountUser` mutation."""
type UpdateBloodCountUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUser` that was updated by this mutation."""
  bloodCountUser: BloodCountUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `BloodCountUser`."""
  user: User

  """Reads a single `BloodCount` that is related to this `BloodCountUser`."""
  bloodCount: BloodCount

  """An edge for our `BloodCountUser`. May be used by Relay 1."""
  bloodCountUserEdge(
    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUsersEdge
}

"""All input for the `updateBloodCountUserByNodeId` mutation."""
input UpdateBloodCountUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCountUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BloodCountUser` being updated.
  """
  patch: BloodCountUserPatch!
}

"""
Represents an update to a `BloodCountUser`. Fields that are set will be updated.
"""
input BloodCountUserPatch {
  bloodCountUserId: Int
  userId: Int
  bloodCountId: Int
}

"""All input for the `updateBloodCountUser` mutation."""
input UpdateBloodCountUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BloodCountUser` being updated.
  """
  patch: BloodCountUserPatch!
  bloodCountUserId: Int!
}

"""
All input for the `updateBloodCountUserByUserIdAndBloodCountId` mutation.
"""
input UpdateBloodCountUserByUserIdAndBloodCountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BloodCountUser` being updated.
  """
  patch: BloodCountUserPatch!
  userId: Int!
  bloodCountId: Int!
}

"""The output of our update `BloodCountUserValue` mutation."""
type UpdateBloodCountUserValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUserValue` that was updated by this mutation."""
  bloodCountUserValue: BloodCountUserValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `BloodCountUser` that is related to this `BloodCountUserValue`.
  """
  bloodCountUser: BloodCountUser

  """
  Reads a single `Meeting` that is related to this `BloodCountUserValue`.
  """
  meeting: Meeting

  """An edge for our `BloodCountUserValue`. May be used by Relay 1."""
  bloodCountUserValueEdge(
    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUserValuesEdge
}

"""All input for the `updateBloodCountUserValueByNodeId` mutation."""
input UpdateBloodCountUserValueByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCountUserValue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BloodCountUserValue` being updated.
  """
  patch: BloodCountUserValuePatch!
}

"""
Represents an update to a `BloodCountUserValue`. Fields that are set will be updated.
"""
input BloodCountUserValuePatch {
  bloodCountUserValueId: Int
  bloodCountUserId: Int
  meetingId: Int
  bloodCountValue: Float
  description: String
  createdAt: Date
}

"""All input for the `updateBloodCountUserValue` mutation."""
input UpdateBloodCountUserValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BloodCountUserValue` being updated.
  """
  patch: BloodCountUserValuePatch!
  bloodCountUserValueId: Int!
}

"""The output of our update `BloodType` mutation."""
type UpdateBloodTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodType` that was updated by this mutation."""
  bloodType: BloodType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodType`. May be used by Relay 1."""
  bloodTypeEdge(
    """The method to use when ordering `BloodType`."""
    orderBy: [BloodTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodTypesEdge
}

"""All input for the `updateBloodTypeByNodeId` mutation."""
input UpdateBloodTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BloodType` being updated.
  """
  patch: BloodTypePatch!
}

"""
Represents an update to a `BloodType`. Fields that are set will be updated.
"""
input BloodTypePatch {
  bloodTypeId: Int
  name: String
}

"""All input for the `updateBloodType` mutation."""
input UpdateBloodTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BloodType` being updated.
  """
  patch: BloodTypePatch!
  bloodTypeId: Int!
}

"""The output of our update `Diagnosis` mutation."""
type UpdateDiagnosisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Diagnosis` that was updated by this mutation."""
  diagnosis: Diagnosis

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisCategory` that is related to this `Diagnosis`.
  """
  diagnosisCategory: DiagnosisCategory

  """Reads a single `DiagnosisGroup` that is related to this `Diagnosis`."""
  diagnosisGroup: DiagnosisGroup

  """An edge for our `Diagnosis`. May be used by Relay 1."""
  diagnosisEdge(
    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosesEdge
}

"""All input for the `updateDiagnosisByNodeId` mutation."""
input UpdateDiagnosisByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Diagnosis` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Diagnosis` being updated.
  """
  patch: DiagnosisPatch!
}

"""
Represents an update to a `Diagnosis`. Fields that are set will be updated.
"""
input DiagnosisPatch {
  diagnosisId: String
  name: String
  diagnosisCategoryId: String
  diagnosisGroupId: String
  description: String
}

"""All input for the `updateDiagnosis` mutation."""
input UpdateDiagnosisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Diagnosis` being updated.
  """
  patch: DiagnosisPatch!
  diagnosisId: String!
}

"""The output of our update `DiagnosisCategory` mutation."""
type UpdateDiagnosisCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisCategory` that was updated by this mutation."""
  diagnosisCategory: DiagnosisCategory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisGroup` that is related to this `DiagnosisCategory`.
  """
  diagnosisGroup: DiagnosisGroup

  """An edge for our `DiagnosisCategory`. May be used by Relay 1."""
  diagnosisCategoryEdge(
    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisCategoriesEdge
}

"""All input for the `updateDiagnosisCategoryByNodeId` mutation."""
input UpdateDiagnosisCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DiagnosisCategory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DiagnosisCategory` being updated.
  """
  patch: DiagnosisCategoryPatch!
}

"""
Represents an update to a `DiagnosisCategory`. Fields that are set will be updated.
"""
input DiagnosisCategoryPatch {
  diagnosisCategoryId: String
  name: String
  diagnosisGroupId: String
  description: String
}

"""All input for the `updateDiagnosisCategory` mutation."""
input UpdateDiagnosisCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DiagnosisCategory` being updated.
  """
  patch: DiagnosisCategoryPatch!
  diagnosisCategoryId: String!
}

"""The output of our update `DiagnosisGroup` mutation."""
type UpdateDiagnosisGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisGroup` that was updated by this mutation."""
  diagnosisGroup: DiagnosisGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DiagnosisGroup`. May be used by Relay 1."""
  diagnosisGroupEdge(
    """The method to use when ordering `DiagnosisGroup`."""
    orderBy: [DiagnosisGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisGroupsEdge
}

"""All input for the `updateDiagnosisGroupByNodeId` mutation."""
input UpdateDiagnosisGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DiagnosisGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DiagnosisGroup` being updated.
  """
  patch: DiagnosisGroupPatch!
}

"""
Represents an update to a `DiagnosisGroup`. Fields that are set will be updated.
"""
input DiagnosisGroupPatch {
  diagnosisGroupId: String
  name: String
  description: String
}

"""All input for the `updateDiagnosisGroup` mutation."""
input UpdateDiagnosisGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DiagnosisGroup` being updated.
  """
  patch: DiagnosisGroupPatch!
  diagnosisGroupId: String!
}

"""The output of our update `InsuranceCompany` mutation."""
type UpdateInsuranceCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InsuranceCompany` that was updated by this mutation."""
  insuranceCompany: InsuranceCompany

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InsuranceCompany`. May be used by Relay 1."""
  insuranceCompanyEdge(
    """The method to use when ordering `InsuranceCompany`."""
    orderBy: [InsuranceCompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InsuranceCompaniesEdge
}

"""All input for the `updateInsuranceCompanyByNodeId` mutation."""
input UpdateInsuranceCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InsuranceCompany` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InsuranceCompany` being updated.
  """
  patch: InsuranceCompanyPatch!
}

"""
Represents an update to a `InsuranceCompany`. Fields that are set will be updated.
"""
input InsuranceCompanyPatch {
  insuranceCompanyId: Int
  name: String
}

"""All input for the `updateInsuranceCompany` mutation."""
input UpdateInsuranceCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InsuranceCompany` being updated.
  """
  patch: InsuranceCompanyPatch!
  insuranceCompanyId: Int!
}

"""The output of our update `Medicament` mutation."""
type UpdateMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Medicament` that was updated by this mutation."""
  medicament: Medicament

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Medicament`. May be used by Relay 1."""
  medicamentEdge(
    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MedicamentsEdge
}

"""All input for the `updateMedicamentByNodeId` mutation."""
input UpdateMedicamentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Medicament` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Medicament` being updated.
  """
  patch: MedicamentPatch!
}

"""
Represents an update to a `Medicament`. Fields that are set will be updated.
"""
input MedicamentPatch {
  medicamentId: Int
  code: String
  title: String
  supplement: String
  strength: String
  packaging: Int
  holderCode: String
  stateCode: String
  atcCode: String
  atcTitleSk: String
  indicationGroup: String
  regNumber: String
  expiration: String
  dispensing: String
  registrationType: String
  regDate: String
  validity: String
  securityFeature: String
}

"""All input for the `updateMedicament` mutation."""
input UpdateMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Medicament` being updated.
  """
  patch: MedicamentPatch!
  medicamentId: Int!
}

"""The output of our update `Meeting` mutation."""
type UpdateMeetingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meeting` that was updated by this mutation."""
  meeting: Meeting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Admin` that is related to this `Meeting`."""
  admin: Admin

  """An edge for our `Meeting`. May be used by Relay 1."""
  meetingEdge(
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeetingsEdge
}

"""All input for the `updateMeetingByNodeId` mutation."""
input UpdateMeetingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meeting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Meeting` being updated.
  """
  patch: MeetingPatch!
}

"""
Represents an update to a `Meeting`. Fields that are set will be updated.
"""
input MeetingPatch {
  meetingId: Int
  meetingDate: Date
  note: String
  userId: String
  adminId: Int
}

"""All input for the `updateMeeting` mutation."""
input UpdateMeetingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Meeting` being updated.
  """
  patch: MeetingPatch!
  meetingId: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `InsuranceCompany` that is related to this `User`."""
  insuranceCompany: InsuranceCompany

  """Reads a single `BloodType` that is related to this `User`."""
  bloodType: BloodType

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  userId: Int
  foreName: String
  surName: String
  identNumber: String
  insuranceNumber: String
  email: String
  phone: String
  birthdate: Date
  verified: Boolean
  insuranceCompanyId: Int
  lastLogin: Date
  bloodTypeId: Int
  rhD: Boolean
  registeredAt: Date
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  userId: Int!
}

"""The output of our update `UserMedicament` mutation."""
type UpdateUserMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserMedicament` that was updated by this mutation."""
  userMedicament: UserMedicament

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserMedicament`."""
  user: User

  """Reads a single `Medicament` that is related to this `UserMedicament`."""
  medicament: Medicament

  """An edge for our `UserMedicament`. May be used by Relay 1."""
  userMedicamentEdge(
    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserMedicamentsEdge
}

"""All input for the `updateUserMedicamentByNodeId` mutation."""
input UpdateUserMedicamentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserMedicament` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserMedicament` being updated.
  """
  patch: UserMedicamentPatch!
}

"""
Represents an update to a `UserMedicament`. Fields that are set will be updated.
"""
input UserMedicamentPatch {
  userMedicamentId: Int
  userId: Int
  medicamentId: Int
}

"""All input for the `updateUserMedicament` mutation."""
input UpdateUserMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserMedicament` being updated.
  """
  patch: UserMedicamentPatch!
  userMedicamentId: Int!
}

"""The output of our delete `Admin` mutation."""
type DeleteAdminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Admin` that was deleted by this mutation."""
  admin: Admin
  deletedAdminNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ambulance` that is related to this `Admin`."""
  ambulance: Ambulance

  """An edge for our `Admin`. May be used by Relay 1."""
  adminEdge(
    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminsEdge
}

"""All input for the `deleteAdminByNodeId` mutation."""
input DeleteAdminByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Admin` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAdmin` mutation."""
input DeleteAdminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  adminId: Int!
}

"""The output of our delete `AdminMedicamentDescription` mutation."""
type DeleteAdminMedicamentDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AdminMedicamentDescription` that was deleted by this mutation."""
  adminMedicamentDescription: AdminMedicamentDescription
  deletedAdminMedicamentDescriptionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Admin` that is related to this `AdminMedicamentDescription`.
  """
  admin: Admin

  """
  Reads a single `Medicament` that is related to this `AdminMedicamentDescription`.
  """
  medicament: Medicament

  """An edge for our `AdminMedicamentDescription`. May be used by Relay 1."""
  adminMedicamentDescriptionEdge(
    """The method to use when ordering `AdminMedicamentDescription`."""
    orderBy: [AdminMedicamentDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminMedicamentDescriptionsEdge
}

"""All input for the `deleteAdminMedicamentDescriptionByNodeId` mutation."""
input DeleteAdminMedicamentDescriptionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdminMedicamentDescription` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAdminMedicamentDescription` mutation."""
input DeleteAdminMedicamentDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  adminMedicamentDescriptionId: Int!
}

"""The output of our delete `Ambulance` mutation."""
type DeleteAmbulancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Ambulance` that was deleted by this mutation."""
  ambulance: Ambulance
  deletedAmbulanceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Ambulance`. May be used by Relay 1."""
  ambulanceEdge(
    """The method to use when ordering `Ambulance`."""
    orderBy: [AmbulancesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmbulancesEdge
}

"""All input for the `deleteAmbulanceByNodeId` mutation."""
input DeleteAmbulanceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ambulance` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAmbulance` mutation."""
input DeleteAmbulanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ambulanceId: String!
}

"""The output of our delete `BloodCount` mutation."""
type DeleteBloodCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCount` that was deleted by this mutation."""
  bloodCount: BloodCount
  deletedBloodCountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodCount`. May be used by Relay 1."""
  bloodCountEdge(
    """The method to use when ordering `BloodCount`."""
    orderBy: [BloodCountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountsEdge
}

"""All input for the `deleteBloodCountByNodeId` mutation."""
input DeleteBloodCountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCount` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBloodCount` mutation."""
input DeleteBloodCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  valueId: Int!
}

"""The output of our delete `BloodCountUser` mutation."""
type DeleteBloodCountUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUser` that was deleted by this mutation."""
  bloodCountUser: BloodCountUser
  deletedBloodCountUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `BloodCountUser`."""
  user: User

  """Reads a single `BloodCount` that is related to this `BloodCountUser`."""
  bloodCount: BloodCount

  """An edge for our `BloodCountUser`. May be used by Relay 1."""
  bloodCountUserEdge(
    """The method to use when ordering `BloodCountUser`."""
    orderBy: [BloodCountUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUsersEdge
}

"""All input for the `deleteBloodCountUserByNodeId` mutation."""
input DeleteBloodCountUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCountUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBloodCountUser` mutation."""
input DeleteBloodCountUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  bloodCountUserId: Int!
}

"""
All input for the `deleteBloodCountUserByUserIdAndBloodCountId` mutation.
"""
input DeleteBloodCountUserByUserIdAndBloodCountIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
  bloodCountId: Int!
}

"""The output of our delete `BloodCountUserValue` mutation."""
type DeleteBloodCountUserValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodCountUserValue` that was deleted by this mutation."""
  bloodCountUserValue: BloodCountUserValue
  deletedBloodCountUserValueNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `BloodCountUser` that is related to this `BloodCountUserValue`.
  """
  bloodCountUser: BloodCountUser

  """
  Reads a single `Meeting` that is related to this `BloodCountUserValue`.
  """
  meeting: Meeting

  """An edge for our `BloodCountUserValue`. May be used by Relay 1."""
  bloodCountUserValueEdge(
    """The method to use when ordering `BloodCountUserValue`."""
    orderBy: [BloodCountUserValuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodCountUserValuesEdge
}

"""All input for the `deleteBloodCountUserValueByNodeId` mutation."""
input DeleteBloodCountUserValueByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodCountUserValue` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBloodCountUserValue` mutation."""
input DeleteBloodCountUserValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  bloodCountUserValueId: Int!
}

"""The output of our delete `BloodType` mutation."""
type DeleteBloodTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BloodType` that was deleted by this mutation."""
  bloodType: BloodType
  deletedBloodTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BloodType`. May be used by Relay 1."""
  bloodTypeEdge(
    """The method to use when ordering `BloodType`."""
    orderBy: [BloodTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BloodTypesEdge
}

"""All input for the `deleteBloodTypeByNodeId` mutation."""
input DeleteBloodTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BloodType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBloodType` mutation."""
input DeleteBloodTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  bloodTypeId: Int!
}

"""The output of our delete `Diagnosis` mutation."""
type DeleteDiagnosisPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Diagnosis` that was deleted by this mutation."""
  diagnosis: Diagnosis
  deletedDiagnosisNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisCategory` that is related to this `Diagnosis`.
  """
  diagnosisCategory: DiagnosisCategory

  """Reads a single `DiagnosisGroup` that is related to this `Diagnosis`."""
  diagnosisGroup: DiagnosisGroup

  """An edge for our `Diagnosis`. May be used by Relay 1."""
  diagnosisEdge(
    """The method to use when ordering `Diagnosis`."""
    orderBy: [DiagnosesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosesEdge
}

"""All input for the `deleteDiagnosisByNodeId` mutation."""
input DeleteDiagnosisByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Diagnosis` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDiagnosis` mutation."""
input DeleteDiagnosisInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  diagnosisId: String!
}

"""The output of our delete `DiagnosisCategory` mutation."""
type DeleteDiagnosisCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisCategory` that was deleted by this mutation."""
  diagnosisCategory: DiagnosisCategory
  deletedDiagnosisCategoryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `DiagnosisGroup` that is related to this `DiagnosisCategory`.
  """
  diagnosisGroup: DiagnosisGroup

  """An edge for our `DiagnosisCategory`. May be used by Relay 1."""
  diagnosisCategoryEdge(
    """The method to use when ordering `DiagnosisCategory`."""
    orderBy: [DiagnosisCategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisCategoriesEdge
}

"""All input for the `deleteDiagnosisCategoryByNodeId` mutation."""
input DeleteDiagnosisCategoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DiagnosisCategory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDiagnosisCategory` mutation."""
input DeleteDiagnosisCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  diagnosisCategoryId: String!
}

"""The output of our delete `DiagnosisGroup` mutation."""
type DeleteDiagnosisGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DiagnosisGroup` that was deleted by this mutation."""
  diagnosisGroup: DiagnosisGroup
  deletedDiagnosisGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `DiagnosisGroup`. May be used by Relay 1."""
  diagnosisGroupEdge(
    """The method to use when ordering `DiagnosisGroup`."""
    orderBy: [DiagnosisGroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DiagnosisGroupsEdge
}

"""All input for the `deleteDiagnosisGroupByNodeId` mutation."""
input DeleteDiagnosisGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DiagnosisGroup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDiagnosisGroup` mutation."""
input DeleteDiagnosisGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  diagnosisGroupId: String!
}

"""The output of our delete `InsuranceCompany` mutation."""
type DeleteInsuranceCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InsuranceCompany` that was deleted by this mutation."""
  insuranceCompany: InsuranceCompany
  deletedInsuranceCompanyNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `InsuranceCompany`. May be used by Relay 1."""
  insuranceCompanyEdge(
    """The method to use when ordering `InsuranceCompany`."""
    orderBy: [InsuranceCompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InsuranceCompaniesEdge
}

"""All input for the `deleteInsuranceCompanyByNodeId` mutation."""
input DeleteInsuranceCompanyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InsuranceCompany` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInsuranceCompany` mutation."""
input DeleteInsuranceCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  insuranceCompanyId: Int!
}

"""The output of our delete `Medicament` mutation."""
type DeleteMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Medicament` that was deleted by this mutation."""
  medicament: Medicament
  deletedMedicamentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Medicament`. May be used by Relay 1."""
  medicamentEdge(
    """The method to use when ordering `Medicament`."""
    orderBy: [MedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MedicamentsEdge
}

"""All input for the `deleteMedicamentByNodeId` mutation."""
input DeleteMedicamentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Medicament` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMedicament` mutation."""
input DeleteMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  medicamentId: Int!
}

"""The output of our delete `Meeting` mutation."""
type DeleteMeetingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meeting` that was deleted by this mutation."""
  meeting: Meeting
  deletedMeetingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Admin` that is related to this `Meeting`."""
  admin: Admin

  """An edge for our `Meeting`. May be used by Relay 1."""
  meetingEdge(
    """The method to use when ordering `Meeting`."""
    orderBy: [MeetingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MeetingsEdge
}

"""All input for the `deleteMeetingByNodeId` mutation."""
input DeleteMeetingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meeting` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMeeting` mutation."""
input DeleteMeetingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  meetingId: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `InsuranceCompany` that is related to this `User`."""
  insuranceCompany: InsuranceCompany

  """Reads a single `BloodType` that is related to this `User`."""
  bloodType: BloodType

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
}

"""The output of our delete `UserMedicament` mutation."""
type DeleteUserMedicamentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserMedicament` that was deleted by this mutation."""
  userMedicament: UserMedicament
  deletedUserMedicamentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserMedicament`."""
  user: User

  """Reads a single `Medicament` that is related to this `UserMedicament`."""
  medicament: Medicament

  """An edge for our `UserMedicament`. May be used by Relay 1."""
  userMedicamentEdge(
    """The method to use when ordering `UserMedicament`."""
    orderBy: [UserMedicamentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserMedicamentsEdge
}

"""All input for the `deleteUserMedicamentByNodeId` mutation."""
input DeleteUserMedicamentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserMedicament` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserMedicament` mutation."""
input DeleteUserMedicamentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userMedicamentId: Int!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar Jwt

"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `authenticateadmin` mutation."""
type AuthenticateadminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `authenticateadmin` mutation."""
input AuthenticateadminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `registeradmin` mutation."""
type RegisteradminPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  admin: Admin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Ambulance` that is related to this `Admin`."""
  ambulance: Ambulance

  """An edge for our `Admin`. May be used by Relay 1."""
  adminEdge(
    """The method to use when ordering `Admin`."""
    orderBy: [AdminsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdminsEdge
}

"""All input for the `registeradmin` mutation."""
input RegisteradminInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forename: String!
  surname: String!
  email: String!
  password: String!
}

"""The output of our `registeruser` mutation."""
type RegisteruserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `InsuranceCompany` that is related to this `User`."""
  insuranceCompany: InsuranceCompany

  """Reads a single `BloodType` that is related to this `User`."""
  bloodType: BloodType

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `registeruser` mutation."""
input RegisteruserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forename: String!
  surname: String!
  email: String!
  password: String!
}
